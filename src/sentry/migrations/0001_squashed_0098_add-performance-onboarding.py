# -*- coding: utf-8 -*-
# Generated by Django 1.11.29 on 2020-08-28 17:05
from __future__ import unicode_literals

import six
import re

from bitfield.types import BitHandler
import bitfield.models
from django.conf import settings
from django.db import migrations, models
import django.db.migrations.operations.special
import django.db.models.deletion
import django.db.models.manager
import django.utils.timezone
import sentry.db.mixin
import sentry.db.models.fields.array
import sentry.db.models.fields.bounded
import sentry.db.models.fields.citext
import sentry.db.models.fields.encrypted
import sentry.db.models.fields.foreignkey
import sentry.db.models.fields.gzippeddict
import sentry.db.models.fields.jsonfield
import sentry.db.models.fields.node
import sentry.db.models.fields.onetoone
import sentry.db.models.fields.uuid
import sentry.models.apiapplication
import sentry.models.apigrant
import sentry.models.apitoken
import sentry.models.broadcast
import sentry.models.groupshare
import sentry.models.scheduledeletion
import sentry.models.sentryapp
import sentry.models.sentryappinstallation
import sentry.models.servicehook
import sentry.models.user
import sentry.models.useremail

from sentry.utils.query import RangeQuerySetWrapperWithProgressBar

def fix_content_types(apps, schema_editor):
    # XXX: This is a gross hack. We missed removing this column a long time ago while
    # upgrading Django. Since different databases might be in different states depending
    # on which path they take to get to Django migrations, it's safest to just check
    # if the column exists for everyone, and remove it if so. This removal is safe,
    # since the column has been long removed from the Django model.

    c = schema_editor.connection.cursor()
    c.execute(
        """
        SELECT 1
        FROM information_schema.columns
        WHERE table_name='django_content_type' and column_name='name';
        """
    )
    results = c.fetchall()
    if len(results):
        c.execute('ALTER TABLE django_content_type DROP COLUMN "name";')
    c.close()

def forwards_0019(apps, schema_editor):
    """
    Backfill the saved queries with their version.
    """
    DiscoverSavedQuery = apps.get_model("sentry", "DiscoverSavedQuery")
    for query in DiscoverSavedQuery.objects.filter(version__isnull=True).all():
        if "version" in query.query:
            query.version = query.query.get("version", 1)
            del query.query["version"]
        else:
            query.version = 1
        query.save()

def forwards_0020(apps, schema_editor):
    EventAttachment = apps.get_model("sentry", "EventAttachment")
    backfill_group_ids(EventAttachment)

def hide_environment_none(apps, schema_editor):
    """
    Hide environments that are named none, since they're blacklisted and no longer can be created.

    We should iterate over each environment row individually in python instead so that we don't lock the DB up. This is
    far slower but much safer
    """
    EnvironmentProject = apps.get_model("sentry", "EnvironmentProject")
    for project in EnvironmentProject.objects.filter(environment__name='none'):
        project.is_hidden = True
        project.save()

def backfill_eventstream(apps, schema_editor):
    """
    Inserts Postgres events into the eventstream if there are recent events in Postgres.

    This is for open source users migrating from 9.x who want to keep their events.
    If there are no recent events in Postgres, skip the backfill.
    """
    from sentry import eventstore, eventstream
    from sentry.utils.query import RangeQuerySetWrapper

    Event = apps.get_model("sentry", "Event")
    Group = apps.get_model("sentry", "Group")
    Project = apps.get_model("sentry", "Project")

    # Kill switch to skip this migration
    skip_backfill = os.environ.get("SENTRY_SKIP_EVENTS_BACKFILL_FOR_10", False)

    # Use 90 day retention if the option has not been set or set to 0
    DEFAULT_RETENTION = 90
    retention_days = options.get("system.event-retention-days") or DEFAULT_RETENTION

    def get_events(last_days):
        to_date = timezone.now()
        from_date = to_date - timedelta(days=last_days)
        return Event.objects.filter(
            datetime__gte=from_date, datetime__lte=to_date, group_id__isnull=False
        )

    def _attach_related(_events):
        project_ids = set()
        group_ids = set()
        for event in _events:
            project_ids.add(event.project_id)
            group_ids.add(event.group_id)
        projects = {p.id: p for p in Project.objects.filter(id__in=project_ids)}
        groups = {g.id: g for g in Group.objects.filter(id__in=group_ids)}

        for event in _events:
            event.project = projects.get(event.project_id)
            event.group = groups.get(event.group_id)
        eventstore.bind_nodes(_events, "data")

    if skip_backfill:
        print("Skipping backfill.\n")
        return

    events = get_events(retention_days)
    count = events.count()

    if count == 0:
        print("Nothing to do, skipping migration.\n")
        return

    print("Events to process: {}\n".format(count))

    processed = 0
    for e in RangeQuerySetWrapper(events, step=100, callbacks=(_attach_related,)):
        event = NewEvent(
            project_id=e.project_id, event_id=e.event_id, group_id=e.group_id, data=e.data.data
        )
        primary_hash = event.get_primary_hash()
        if event.project is None or event.group is None:
            print("Skipped {} as group or project information is invalid.\n".format(event))
            continue

        try:
            eventstream.insert(
                group=event.group,
                event=event,
                is_new=False,
                is_regression=False,
                is_new_group_environment=False,
                primary_hash=primary_hash,
                received_timestamp=event.data.get("received")
                or float(event.datetime.strftime("%s")),
                skip_consume=True,
            )
            processed += 1
        except Exception as error:
            print(
                "An error occured while trying to instert the following event: {}\n.----\n{}".format(
                    event, error
                )
            )

    if processed == 0:
        raise Exception(
            "Cannot migrate any event. If this is okay, re-run migrations with SENTRY_SKIP_EVENTS_BACKFILL_FOR_10 environment variable set to skip this step."
        )

    print("Event migration done. Migrated {} of {} events.\n".format(processed, count))

def backfill_user_reports(apps, schema_editor):
    """
    Processes user reports that are missing event data, and adds the appropriate data
    if the event exists in Clickhouse.
    """
    UserReport = apps.get_model("sentry", "UserReport")

    user_reports = UserReport.objects.filter(group__isnull=True, environment__isnull=True)

    for report in RangeQuerySetWrapper(user_reports, step=1000):
        try:
            event = eventstore.get_event_by_id(report.project_id, report.event_id)
        except (SnubaError, QueryOutsideGroupActivityError, QueryOutsideRetentionError) as se:
            logger.warn(
                "failed to fetch event %s for project %d: %s"
                % (report.event_id, report.project_id, se)
            )
            continue

        if event:
            report.update(group_id=event.group_id, environment=event.get_environment())

OPERATOR_KEYS = set(
    [
        "project_id",
        "project.id",
        "issue.id",
        "device.battery_level",
        "device.charging",
        "device.online",
        "device.simulator",
        "error.handled",
        "stack.colno",
        "stack.in_app",
        "stack.lineno",
        "stack.stack_level",
        "transaction.duration",
        "apdex",
        "impact",
        "p75",
        "p95",
        "p99",
        "error_rate",
        "start",
        "end",
        "first_seen",
        "last_seen",
        "time",
        "timestamp",
        "transaction.start_time",
        "transaction.end_time",
    ]
)


# Aggregates are now fields
def convert_field(fieldname, unique, reverse):
    if fieldname == "count":
        fieldname = u"count()"
    elif unique:
        fieldname = u"count_unique({})".format(fieldname)

    fieldname = u"-{}".format(fieldname) if reverse else fieldname
    return fieldname

def prepare_value(value):
    value = value.replace("%", "*")
    if " " in value and not value.startswith('"'):
        value = u'"{}"'.format(value)
    return value

def migrate_v1_queries(apps, schema_editor):
    """
    Creates v2 versions of existing v1 queries
    """
    DiscoverSavedQuery = apps.get_model("sentry", "DiscoverSavedQuery")
    DiscoverSavedQueryProject = apps.get_model("sentry", "DiscoverSavedQueryProject")

    """ Seq Scan on sentry_discoversavedquery
        (cost=0.00..102.86 rows=1601 width=284)
        (actual time=0.027..1.158 rows=1275 loops=1)
        Filter: (version = 1)
        Rows Removed by Filter: 69
        Planning time: 0.929 ms
        Execution time: 1.296 ms
    """
    def convert(DiscoverSavedQuery, DiscoverSavedQueryProject, saved_query, name_extra=" (migrated from legacy discover)"):
        """ Create a v2 query from a v1 query"""
        if saved_query.version == 2:
            # nothing to do! Already v2 :)
            return saved_query

        updated_query = {
            u"environment": [],
            u"fields": saved_query.query.get('fields', []),
            u"orderby": u"",
            u"query": [],  # Will become a string later via join
        }

        if "range" in saved_query.query:
            updated_query["range"] = saved_query.query["range"]
        elif "start" in saved_query.query and "end" in saved_query.query:
            updated_query["start"] = saved_query.query["start"]
            updated_query["end"] = saved_query.query["end"]
        else:
            updated_query["range"] = "14d"

        for aggregate in saved_query.query.get("aggregations", []):
            if aggregate[0] == "uniq":
                field = convert_field(aggregate[1], True, False)
            else:
                field = convert_field(aggregate[0], False, False)
            if field:
                updated_query["fields"].append(field)

        # Order by
        orderby = saved_query.query.get('orderby', "")
        unique = reverse = False
        if orderby.startswith('-'):
            reverse = True
            orderby = orderby[1:]
        if orderby.startswith('uniq_'):
            unique = True
            orderby = orderby[5:].replace('_', '.')
        field = convert_field(orderby, unique, reverse)

        if field:
            updated_query['orderby'] = field
            if reverse:
                field = field[1:]
            if field not in updated_query["fields"]:
                updated_query["fields"].append(field)

        # Conditions become a query now
        for condition in saved_query.query.get("conditions", []):
            column, operator, value = condition
            if column in ['contexts.key']:
                column = "tags[contexts.key]"
            if column == "environment" and operator == "=":
                updated_query['environment'].append(value.strip('"'))
            elif operator == 'IS NOT NULL':
                updated_query["query"].append(u"has:{}".format(column))
            elif operator == 'IS NULL':
                updated_query["query"].append(u"!has:{}".format(column))
            elif column in OPERATOR_KEYS:
                updated_query["query"].append(u"{}:{}{}".format(
                    column,
                    operator if operator != '=' else '',
                    value
                ))
            elif operator in ['LIKE', '=']:
                updated_query["query"].append(u"{}:{}".format(column, prepare_value(value)))
            elif operator in ['NOT LIKE', '!=']:
                updated_query["query"].append(u"!{}:{}".format(column, prepare_value(value)))
        updated_query["query"] = ' '.join(updated_query["query"])

        # Create the version 2 query
        new_query = DiscoverSavedQuery.objects.create(
            organization=saved_query.organization,
            name=saved_query.name + name_extra,
            query=updated_query,
            version=2,
        )

        # Set project_ids
        saved_query_project_ids = DiscoverSavedQueryProject.objects.filter(
            discover_saved_query=saved_query
        ).values_list("project", flat=True)

        # This is DiscoverSavedQueryProject.set_projects
        DiscoverSavedQueryProject.objects.filter(discover_saved_query=new_query).exclude(
            project__in=saved_query_project_ids
        ).delete()

        existing_project_ids = DiscoverSavedQueryProject.objects.filter(
            discover_saved_query=new_query
        ).values_list("project", flat=True)

        new_project_ids = list(set(saved_query_project_ids) - set(existing_project_ids))

        DiscoverSavedQueryProject.objects.bulk_create(
            [
                DiscoverSavedQueryProject(project_id=project_id, discover_saved_query=new_query)
                for project_id in new_project_ids
            ]
        )

        return new_query

    queryset = DiscoverSavedQuery.objects.filter(version=1)

    for query in RangeQuerySetWrapperWithProgressBar(queryset):
        convert(DiscoverSavedQuery, DiscoverSavedQueryProject, query)


def delete_alert_rules_incidents(apps, schema_editor):
    from sentry.utils.query import RangeQuerySetWrapper

    Incident = apps.get_model("sentry", "Incident")
    AlertRule = apps.get_model("sentry", "AlertRule")
    TimeSeriesSnapshot = apps.get_model("sentry", "TimeSeriesSnapshot")
    QuerySubscription = apps.get_model("sentry", "QuerySubscription")

    for incident in RangeQuerySetWrapper(Incident.objects.all()):
        incident.delete()

    for alert_rule in RangeQuerySetWrapper(AlertRule.objects.all()):
        alert_rule.delete()

    for snapshot in RangeQuerySetWrapper(TimeSeriesSnapshot.objects.all()):
        snapshot.delete()

    for sub in RangeQuerySetWrapper(QuerySubscription.objects.all()):
        sub.delete()


def delete_alert_email_user_options(apps, schema_editor):
    """
    Processes user reports that are missing event data, and adds the appropriate data
    if the event exists in Clickhouse.
    """
    from sentry.utils.query import RangeQuerySetWrapperWithProgressBar

    UserOption = apps.get_model("sentry", "UserOption")

    """
    Seq Scan on sentry_useroption (cost=0.00..40142.93 rows=42564 width=65) (actual time=30.690..9720.536 rows=42407 loops=1)
    Filter: ((key)::text = 'alert_email'::text)
    Rows Removed by Filter: 1692315
    Planning time: 234.778 ms
    Execution time: 9730.608 ms
    """
    for user_option in RangeQuerySetWrapperWithProgressBar(UserOption.objects.all()):
        if user_option.key == "alert_email":
            user_option.delete()

def cleanup_audit_log_data(apps, schema_editor):
    """
    Fix `AuditLogEntry` rows that have pickled `Team` models in their `data` field. Also
    fixes some rows where flags were serialized as a BitHandler rather than a int.
    See sentry.api.serializers.models.auditlogentry::fix for details.
    """
    AuditLogEntry = apps.get_model("sentry", "AuditLogEntry")
    for audit_log in RangeQuerySetWrapperWithProgressBar(AuditLogEntry.objects.all()):
        modified = False
        if "flags" in audit_log.data and isinstance(audit_log.data["flags"], BitHandler):
            audit_log.data["flags"] = int(audit_log.data["flags"])
            modified = True
        if audit_log.event == 3:  # MEMBER_ACCEPT
            teams = audit_log.data.get("teams")
            if teams and hasattr(teams[0], "id"):
                # We have a team in here rather than just the expected data
                audit_log.data["teams"] = [team.id for team in teams]
                audit_log.data["teams_slugs"] = [team.slug for team in teams]
                modified = True
        if modified:
            audit_log.save()


FIELDS_TO_CHANGE = set(["orderby", "fields", "yAxis", "query"])
FUNCTION_CHANGE = {
    "p75": "p75()",
    "p95": "p95()",
    "p99": "p99()",
    "apdex": "apdex(300)",
    "impact": "impact(300)",
    "last_seen": "last_seen()",
    "latest_event": "latest_event()",
}
COUNT_REGEX = re.compile(".*(count\([a-zA-Z\._]+\)).*")
FUNCTION_PATTERN = re.compile(r"^(?P<function>[^\(]+)\((?P<columns>[^\)]*)\)$")


def get_function_alias_with_columns(function_name, columns):
    columns = "_".join(columns).replace(".", "_")
    return "{}_{}".format(function_name, columns).rstrip("_")


def get_function_alias(field):
    match = FUNCTION_PATTERN.search(field)
    columns = [c.strip() for c in match.group("columns").split(",") if len(c.strip()) > 0]
    return get_function_alias_with_columns(match.group("function"), columns)


def convert_function(field, count_default="count()", transform=None):
    if transform is None:
        transform = lambda x: x

    if "count" in field and "count_unique" not in field:
        field = count_default
        return field

    for old_fn, new_fn in six.iteritems(FUNCTION_CHANGE):
        if old_fn + "()" in field:
            field = field.replace(old_fn + "()", transform(new_fn))
        elif old_fn in field:
            field = field.replace(old_fn, transform(new_fn))

    return field


def migrate_functions_in_queries(apps, schema_editor):
    """
    Creates v2 versions of existing v1 queries
    """
    DiscoverSavedQuery = apps.get_model("sentry", "DiscoverSavedQuery")

    """
    Seq Scan on sentry_discoversavedquery (cost=0.00..225.15 rows=1077 width=200) (actual time=0.054..7.875 rows=1037 loops=1)
    Filter: ((version = 2) AND ((query ~~ '%p95%'::text) OR (query ~~ '%p99%'::text) OR (query ~~ '%p75%'::text) OR (query ~~ '%apdex%'::text) OR (query ~~ '%impact%'::text) OR (query ~~ '%last_seen%'::text) OR (query ~~ '%latest_event%'::text) OR (query ~~ '%count(%'::text)))
    Rows Removed by Filter: 2074
    Planning time: 2.305 ms
    Execution time: 8.694 ms
    """


    def convert(DiscoverSavedQuery, saved_query):
        old_query = saved_query.query
        new_query = {}

        for key in old_query:
            if key in FIELDS_TO_CHANGE:
                continue

            new_query[key] = old_query[key]

        orderby = old_query.get("orderby")
        if orderby:
            new_query["orderby"] = convert_function(
                orderby, count_default="count", transform=get_function_alias
            )

        yAxis = old_query.get("yAxis")
        if yAxis:
            new_query["yAxis"] = convert_function(yAxis)

        fields = old_query.get("fields")
        new_fields = []
        for field in fields:
            new_fields.append(convert_function(field))
        new_query["fields"] = new_fields

        search = old_query.get("query")
        if search:
            match = COUNT_REGEX.match(search)
            if match:
                search = search.replace(match.groups()[0], "count()")
            for old_fn, new_fn in six.iteritems(FUNCTION_CHANGE):
                if old_fn + "()" in search:
                    search = search.replace(old_fn + "()", new_fn)
                elif old_fn in search:
                    search = search.replace(old_fn, new_fn)
            new_query["query"] = search

        DiscoverSavedQuery.objects.filter(id=saved_query.id).update(query=new_query)

    function_filter = Q(query__contains="count(")
    for key in FUNCTION_CHANGE:
        function_filter |= Q(query__contains=key)

    queryset = DiscoverSavedQuery.objects.filter(function_filter, version=2)

    for query in RangeQuerySetWrapperWithProgressBar(queryset):
        convert(DiscoverSavedQuery, query)

def migrate_to_issue_alert_targeting(apps, schema_editor):
    mail_action = {
        "id": "sentry.mail.actions.NotifyEmailAction",
        "targetType": "IssueOwners",
        "targetIdentifier": "None",
    }

    def set_user_option(UserOption, user, key, value, project):
        inst, created = UserOption.objects.get_or_create(
            user=user, project=project, key=key, defaults={"value": value}
        )
        if not created and inst.value != value:
            inst.update(value=value)

    def migrate_project_to_issue_alert_targeting(project, ProjectOption, Rule, User, UserOption):
        if project.flags.has_issue_alerts_targeting:
            # Migration has already been run.
            return
        with transaction.atomic():
            # Determine whether this project actually has mail enabled
            try:
                mail_enabled = ProjectOption.objects.get(project=project, key="mail:enabled").value
            except ProjectOption.DoesNotExist:
                mail_enabled = True
            for rule in Rule.objects.filter(project=project, status=0):
                migrate_legacy_rule(rule, mail_enabled)

            if not mail_enabled:
                # If mail disabled, then we want to disable mail options for all
                # users associated with this project so that they don't suddenly start
                # getting mail via the `MailAdapter`, since it will always be enabled.
                for user in User.objects.filter(
                    sentry_orgmember_set__teams__in=project.teams.all(), is_active=True
                ):
                    set_user_option(UserOption, user, "mail:alert", 0, project)
                    set_user_option(
                        UserOption, user, "workflow:notifications", "2", project=project
                    )

            # This marks the migration finished and shows the new UI
            project.flags.has_issue_alerts_targeting = True
            project.save()

    def migrate_legacy_rule(rule, mail_enabled):
        actions = rule.data.get("actions", [])
        new_actions = []
        has_mail_action = False
        for action in actions:
            action_id = action.get("id")
            if action_id == "sentry.rules.actions.notify_event.NotifyEventAction":
                # This is the "Send a notification (for all legacy integrations)" action.
                # When this action exists, we want to add the new `NotifyEmailAction` action
                # to the rule. We'll still leave `NotifyEventAction` in place, since it will
                # only notify non-mail plugins once we've migrated.
                new_actions.append(action)
                has_mail_action = True
            elif (
                action_id == "sentry.rules.actions.notify_event_service.NotifyEventServiceAction"
                and action.get("service") == "mail"
            ):
                # This is the "Send a notification via mail" action. When this action
                # exists, we want to add the new `NotifyEmailAction` action to the rule.
                # We'll drop this action from the rule, since all it does it send mail and
                # we don't want to double up.
                has_mail_action = True
            else:
                new_actions.append(action)

        # We only add the new action if the mail plugin is actually enabled, and there's an
        # action that sends by mail. We do this outside the loop to ensure we don't add it
        # more than once.
        if mail_enabled and has_mail_action:
            new_actions.append(mail_action)

        if actions != new_actions:
            rule.data["actions"] = new_actions
            rule.save()

    Project = apps.get_model("sentry", "Project")
    ProjectOption = apps.get_model("sentry", "ProjectOption")
    Organization = apps.get_model("sentry", "Organization")
    Rule = apps.get_model("sentry", "Rule")
    User = apps.get_model("sentry", "User")
    UserOption = apps.get_model("sentry", "UserOption")

    for org in RangeQuerySetWrapperWithProgressBar(Organization.objects.filter(status=0)):
        # We migrate a project at a time, but we prefer to group by org so that for the
        # most part an org will see the changes all at once.
        for project in Project.objects.filter(organization=org, status=0):
            try:
                migrate_project_to_issue_alert_targeting(
                    project, ProjectOption, Rule, User, UserOption
                )
            except Exception:
                # If a project fails we'll just log and continue. We shouldn't see any
                # failures, but if we do we can analyze them and re-run this migration,
                # since it is idempotent.
                logging.exception("Error migrating project {}".format(project.id))


def remove_tracked_superuser_views(apps, schema_editor):
    """
    We recently added code to only track alert views of people in the org + member of associated alert projects.
    This migration removes all of the views we've tracked before adding this change (i.e. superuser views of orgs we're not a part of).
    """
    def has_access(org, user, access=None):
        queryset = org.member_set.filter(user=user)
        if access is not None:
            queryset = queryset.filter(type__lte=access)

        return queryset.exists()


    IncidentSeen = apps.get_model("sentry", "IncidentSeen")
    tracked_views = IncidentSeen.objects.all().select_related("user", "incident")
    for tracked_view in tracked_views:
        org_member = has_access(tracked_view.incident.organization, tracked_view.user)
        if not org_member:
            tracked_view.delete()

def migrate_alert_query_model_0073(apps, schema_editor):
    class QueryAggregations(Enum):
        TOTAL = 0
        UNIQUE_USERS = 1


    aggregation_function_translations = {
        QueryAggregations.TOTAL: "count()",
        QueryAggregations.UNIQUE_USERS: "count_unique(user)",
    }


    def convert_alert_rule_to_snuba_query(alert_rule, SnubaQuery):
        if alert_rule.snuba_query:
            return

        with transaction.atomic():
            try:
                environment = alert_rule.environment.all()[0]
            except IndexError:
                environment = None
            snuba_query = SnubaQuery.objects.create(
                dataset=alert_rule.dataset,
                query=alert_rule.query,
                aggregate=aggregation_function_translations[QueryAggregations(alert_rule.aggregation)],
                time_window=int(timedelta(minutes=alert_rule.time_window).total_seconds()),
                resolution=int(timedelta(minutes=alert_rule.resolution).total_seconds()),
                environment=environment,
            )
            alert_rule.snuba_query = snuba_query
            alert_rule.save()
            alert_rule.query_subscriptions.all().update(snuba_query=snuba_query)


    AlertRule = apps.get_model("sentry", "AlertRule")
    SnubaQuery = apps.get_model("sentry", "SnubaQuery")
    for alert_rule in RangeQuerySetWrapperWithProgressBar(
        AlertRule.objects_with_snapshots.filter(snuba_query__isnull=True)
    ):
        convert_alert_rule_to_snuba_query(alert_rule, SnubaQuery)

def migrate_alert_query_model_0075(apps, schema_editor):
    SnubaQuery = apps.get_model("sentry", "SnubaQuery")
    for snuba_query in RangeQuerySetWrapperWithProgressBar(
        SnubaQuery.objects.filter(aggregate="count_unique(user)")
    ):
        snuba_query.aggregate = "count_unique(tags[sentry:user])"
        snuba_query.save()


def delete_incidents_with_no_alert_rule(apps, schema_editor):
    # These are only test incidents that we don't care about, should be fine to remove
    # these so that we can require there always be an AlertRule associated with
    # Incidents going forward
    Incident = apps.get_model("sentry", "Incident")
    for incident in RangeQuerySetWrapperWithProgressBar(
        Incident.objects.filter(alert_rule__isnull=True)
    ):
        incident.delete()

def fix_error_rate_snuba_queries(apps, schema_editor):
    SnubaQuery = apps.get_model("sentry", "SnubaQuery")
    for snuba_query in RangeQuerySetWrapperWithProgressBar(
        SnubaQuery.objects.filter(aggregate="error_rate()")
    ):
        snuba_query.aggregate = "failure_rate()"
        snuba_query.save()


def backfill_rule_level_fields(apps, schema_editor):
    AlertRule = apps.get_model("sentry", "AlertRule")
    for alert_rule in RangeQuerySetWrapperWithProgressBar(AlertRule.objects_with_snapshots.all()):
        triggers = list(alert_rule.alertruletrigger_set.all())
        # Determine the resolve_threshold and threshold_type from the rule's triggers
        if triggers:
            # Threshold types are the same for all triggers on a rule, so just grab one
            threshold_type = triggers[0].threshold_type
            resolve_thresholds = [
                t.resolve_threshold for t in triggers if t.resolve_threshold is not None
            ]
            if resolve_thresholds:
                # Either grab the min or max resolve threshold depending on whether
                # we're an above or below threshold rule.
                func = min if threshold_type == 0 else max
                resolve_threshold = func(resolve_thresholds)
            else:
                resolve_threshold = None

            alert_rule.resolve_threshold = resolve_threshold
            alert_rule.threshold_type = threshold_type
        else:
            # Just a failsafe in case we have any bad rules without triggers.
            alert_rule.threshold_type = 0
        alert_rule.save()


def cleanup_audit_log_data(apps, schema_editor):
    """
    Fix `AuditLogEntry` rows that have pickled `Team` models in their `data` field.

    We originally had fixed this in [0], but we missed some types. This is
    basically the same migration, but without the audit log entry type gaurd.

    [0]: https://github.com/getsentry/sentry/pull/17545
    """
    AuditLogEntry = apps.get_model("sentry", "AuditLogEntry")
    for audit_log in RangeQuerySetWrapperWithProgressBar(AuditLogEntry.objects.all()):
        teams = audit_log.data.get("teams")
        if teams and hasattr(teams[0], "id"):
            # We have a team in here rather than just the expected data
            audit_log.data["teams"] = [team.id for team in teams]
            audit_log.data["teams_slugs"] = [team.slug for team in teams]
            audit_log.save()

def cleanup_event_attachment_files(apps, schema_editor):
    """
    Previously, cleanup task code did a SQL bulk delete on EventAttachment
    leaving orphaned File and FileBlob objects. These orphaned files now need to
    be purged as they are still consuming space.
    """
    EventAttachment = apps.get_model("sentry", "EventAttachment")
    File = apps.get_model("sentry", "File")

    # Find the oldest live attachment as we only want to purge old files.
    # If there are not files skip everything.
    oldest_attachment = EventAttachment.objects.all().aggregate(Min("date_added"))
    if not oldest_attachment or oldest_attachment["date_added__min"] is None:
        return

    # File types used in event attachments.
    attachment_types = [
        "event.applecrashreport",
        "event.attachment",
        "event.payload",
        "event.minidump",
        "unreal.context",
        "unreal.logs",
    ]
    file_query = (File.objects
        .filter(timestamp__lt=oldest_attachment["date_added__min"])
        .filter(type__in=attachment_types))

    for f in RangeQuerySetWrapper(file_query):
        # Double check that the file is not referenced.
        if not EventAttachment.objects.filter(file=f).exists():
            f.delete()


def update_ui_components(apps, schema_editor):
    #update the field with mutation
    def convert_field(field):
        # even if async if false, we had a bug where we'd treat it the same as true
        # so to maintain legacy behavior, we have to replicate that same check when setting skip_load_on_open
        if "async" in field:
            field["skip_load_on_open"] = True
            del field["async"]


    # updates the schema with mutation
    def update_element_schema(schema):
        # update all the fields in the schema
        link = schema.get("link", {})
        create = schema.get("create", {})

        for field in link.get("required_fields", []):
            convert_field(field)

        for field in link.get("optional_fields", []):
            convert_field(field)

        for field in create.get("required_fields", []):
            convert_field(field)

        for field in create.get("optional_fields", []):
            convert_field(field)

    SentryAppComponent = apps.get_model("sentry", "SentryAppComponent")
    for component in SentryAppComponent.objects.filter(type="issue-link").select_related("sentry_app"):
        # need to update the denormalized data
        update_element_schema(component.schema)
        for element in component.sentry_app.schema.get("elements", []):
            # only update issue link elements
            if element.get("type") == "issue-link":
                update_element_schema(element)

        # save the UI component and the sentry app
        component.save()
        component.sentry_app.save()



# Functions from the following migrations need manual copying.
# Move them and any dependencies into this file, then update the
# RunPython operations to refer to the local versions:
# sentry.migrations.0078_incident_field_updates
# sentry.migrations.0085_fix_error_rate_snuba_query
# sentry.migrations.0089_rule_level_fields_backfill
# sentry.migrations.0090_fix_auditlog_pickled_data_take_2
# sentry.migrations.0094_cleanup_unreferenced_event_files
# sentry.migrations.0096_sentry_app_component_skip_load_on_open

class Migration(migrations.Migration):
    # This flag is used to mark that a migration shouldn't be automatically run in
    # production. We set this to True for operations that we think are risky and want
    # someone from ops to run manually and monitor.
    # General advice is that if in doubt, mark your migration as `is_dangerous`.
    # Some things you should always mark as dangerous:
    # - Large data migrations. Typically we want these to be run manually by ops so that
    #   they can be monitored. Since data migrations will now hold a transaction open
    #   this is even more important.
    # - Adding columns to highly active tables, even ones that are NULL.
    is_dangerous = False

    # This flag is used to decide whether to run this migration in a transaction or not.
    # By default we prefer to run in a transaction, but for migrations where you want
    # to `CREATE INDEX CONCURRENTLY` this needs to be set to False. Typically you'll
    # want to create an index concurrently when adding one to an existing table.
    atomic = True


    replaces = [(b'sentry', '0001_initial'), (b'sentry', '0002_912_to_recent'), (b'sentry', '0003_auto_20191022_0122'), (b'sentry', '0004_bitfieldtestmodel_blankjsonfieldtestmodel_callabledefaultmodel_jsonfieldtestmodel_jsonfieldwithdefau'), (b'sentry', '0005_fix_content_types'), (b'sentry', '0006_sentryapp_date_published'), (b'sentry', '0007_auto_20191029_0131'), (b'sentry', '0008_auto_20191030_0016'), (b'sentry', '0009_auto_20191101_1608'), (b'sentry', '0010_auto_20191104_1641'), (b'sentry', '0011_remove_pagerdutyservice_service_id_from_state'), (b'sentry', '0012_remove_pagerdutyservice_service_id'), (b'sentry', '0013_auto_20191111_1829'), (b'sentry', '0014_delete_sentryappwebhookerror'), (b'sentry', '0015_delete_sentryappwebhookerror_db'), (b'sentry', '0016_delete_alert_rule_deprecated_fields'), (b'sentry', '0017_incident_aggregation'), (b'sentry', '0018_discoversavedquery_version'), (b'sentry', '0019_auto_20191114_2040'), (b'sentry', '0020_auto_20191125_1420'), (b'sentry', '0021_auto_20191203_1803'), (b'sentry', '0021_auto_20191202_1716'), (b'sentry', '0022_merge'), (b'sentry', '0023_hide_environment_none_20191126'), (b'sentry', '0024_auto_20191230_2052'), (b'sentry', '0025_organizationaccessrequest_requester'), (b'sentry', '0026_delete_event'), (b'sentry', '0027_exporteddata'), (b'sentry', '0028_user_reports'), (b'sentry', '0029_discover_query_upgrade'), (b'sentry', '0030_auto_20200201_0039'), (b'sentry', '0031_delete_alert_rules_and_incidents'), (b'sentry', '0032_delete_alert_email'), (b'sentry', '0033_auto_20200210_2137'), (b'sentry', '0034_auto_20200210_2311'), (b'sentry', '0035_auto_20200127_1711'), (b'sentry', '0036_auto_20200213_0106'), (b'sentry', '0037_auto_20200213_0140'), (b'sentry', '0038_auto_20200213_1904'), (b'sentry', '0039_delete_incidentsuspectcommit'), (b'sentry', '0040_remove_incidentsuspectcommittable'), (b'sentry', '0041_incidenttrigger_date_modified'), (b'sentry', '0042_auto_20200214_1607'), (b'sentry', '0043_auto_20200218_1903'), (b'sentry', '0044_auto_20200219_0018'), (b'sentry', '0045_remove_incidentactivity_event_stats_snapshot'), (b'sentry', '0046_auto_20200221_1735'), (b'sentry', '0047_auto_20200224_2319'), (b'sentry', '0048_auto_20200302_1825'), (b'sentry', '0049_auto_20200304_0254'), (b'sentry', '0050_auto_20200306_2346'), (b'sentry', '0051_fix_auditlog_pickled_data'), (b'sentry', '0052_organizationonboardingtask_completion_seen'), (b'sentry', '0053_migrate_alert_task_onboarding'), (b'sentry', '0054_create_key_transaction'), (b'sentry', '0055_query_subscription_status'), (b'sentry', '0056_remove_old_functions'), (b'sentry', '0057_remove_unused_project_flag'), (b'sentry', '0058_project_issue_alerts_targeting'), (b'sentry', '0059_add_new_sentry_app_features'), (b'sentry', '0060_add_file_eventattachment_index'), (b'sentry', '0061_alertrule_partial_index'), (b'sentry', '0062_key_transactions_unique_with_owner'), (b'sentry', '0063_drop_alertrule_constraint'), (b'sentry', '0064_project_has_transactions'), (b'sentry', '0065_add_incident_status_method'), (b'sentry', '0066_alertrule_manager'), (b'sentry', '0067_migrate_rules_alert_targeting'), (b'sentry', '0068_project_default_flags'), (b'sentry', '0069_remove_tracked_superusers'), (b'sentry', '0070_incident_snapshot_support'), (b'sentry', '0071_add_default_fields_model_subclass'), (b'sentry', '0072_alert_rules_query_changes'), (b'sentry', '0073_migrate_alert_query_model'), (b'sentry', '0074_add_metric_alert_feature'), (b'sentry', '0075_metric_alerts_fix_releases'), (b'sentry', '0076_alert_rules_disable_constraints'), (b'sentry', '0077_alert_query_col_drop_state'), (b'sentry', '0078_incident_field_updates'), (b'sentry', '0079_incidents_remove_query_field_state'), (b'sentry', '0080_alert_rules_drop_unused_tables_cols'), (b'sentry', '0081_add_integraiton_upgrade_audit_log'), (b'sentry', '0082_alert_rules_threshold_float'), (b'sentry', '0083_add_max_length_webhook_url'), (b'sentry', '0084_exported_data_blobs'), (b'sentry', '0085_fix_error_rate_snuba_query'), (b'sentry', '0086_sentry_app_installation_for_provider'), (b'sentry', '0087_fix_time_series_data_type'), (b'sentry', '0088_rule_level_resolve_threshold_type'), (b'sentry', '0089_rule_level_fields_backfill'), (b'sentry', '0090_fix_auditlog_pickled_data_take_2'), (b'sentry', '0091_alertruleactivity'), (b'sentry', '0092_remove_trigger_threshold_type_nullable'), (b'sentry', '0093_make_identity_user_id_textfield'), (b'sentry', '0094_cleanup_unreferenced_event_files'), (b'sentry', '0095_ruleactivity'), (b'sentry', '0096_sentry_app_component_skip_load_on_open'), (b'sentry', '0097_add_sentry_app_id_to_sentry_alertruletriggeraction'), (b'sentry', '0098_add-performance-onboarding')]

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', sentry.db.models.fields.bounded.BoundedAutoField(primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=128, unique=True, verbose_name='username')),
                ('name', models.CharField(blank=True, db_column=b'first_name', max_length=200, verbose_name='name')),
                ('email', models.EmailField(blank=True, max_length=75, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('is_managed', models.BooleanField(default=False, help_text='Designates whether this user should be treated as managed. Select this to disallow the user from modifying their account (username, password, etc).', verbose_name='managed')),
                ('is_sentry_app', models.NullBooleanField(default=None, help_text='Designates whether this user is the entity used for Permissionson behalf of a Sentry App. Cannot login or use Sentry like anormal User would.', verbose_name='is sentry app')),
                ('is_password_expired', models.BooleanField(default=False, help_text='If set to true then the user needs to change the password on next sign in.', verbose_name='password expired')),
                ('last_password_change', models.DateTimeField(help_text='The date the password was changed last.', null=True, verbose_name='date of last password change')),
                ('flags', bitfield.models.BitField(((b'newsletter_consent_prompt', b'Do we need to ask this user for newsletter consent?'),), default=0, null=True)),
                ('session_nonce', models.CharField(max_length=12, null=True)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('last_active', models.DateTimeField(default=django.utils.timezone.now, null=True, verbose_name='last active')),
            ],
            options={
                'db_table': 'auth_user',
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
            },
            managers=[
                ('objects', sentry.models.user.UserManager(cache_fields=[b'pk'])),
            ],
        ),
        migrations.CreateModel(
            name='Activity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'set_resolved'), (15, b'set_resolved_by_age'), (13, b'set_resolved_in_release'), (16, b'set_resolved_in_commit'), (21, b'set_resolved_in_pull_request'), (2, b'set_unresolved'), (3, b'set_ignored'), (4, b'set_public'), (5, b'set_private'), (6, b'set_regression'), (7, b'create_issue'), (8, b'note'), (9, b'first_seen'), (10, b'release'), (11, b'assigned'), (12, b'unassigned'), (14, b'merge'), (17, b'deploy'), (18, b'new_processing_issues'), (19, b'unmerge_source'), (20, b'unmerge_destination')])),
                ('ident', models.CharField(max_length=64, null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField(null=True)),
            ],
            options={
                'db_table': 'sentry_activity',
            },
        ),
        migrations.CreateModel(
            name='ApiApplication',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('client_id', models.CharField(default=sentry.models.apiapplication.generate_token, max_length=64, unique=True)),
                ('client_secret', sentry.db.models.fields.encrypted.EncryptedTextField(default=sentry.models.apiapplication.generate_token)),
                ('name', models.CharField(blank=True, default=sentry.models.apiapplication.generate_name, max_length=64)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, 'Active'), (1, 'Inactive')], db_index=True, default=0)),
                ('allowed_origins', models.TextField(blank=True, null=True)),
                ('redirect_uris', models.TextField()),
                ('homepage_url', models.URLField(null=True)),
                ('privacy_url', models.URLField(null=True)),
                ('terms_url', models.URLField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('owner', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_apiapplication',
            },
        ),
        migrations.CreateModel(
            name='ApiAuthorization',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('scopes', bitfield.models.BitField(((b'project:read', b'project:read'), (b'project:write', b'project:write'), (b'project:admin', b'project:admin'), (b'project:releases', b'project:releases'), (b'team:read', b'team:read'), (b'team:write', b'team:write'), (b'team:admin', b'team:admin'), (b'event:read', b'event:read'), (b'event:write', b'event:write'), (b'event:admin', b'event:admin'), (b'org:read', b'org:read'), (b'org:write', b'org:write'), (b'org:admin', b'org:admin'), (b'member:read', b'member:read'), (b'member:write', b'member:write'), (b'member:admin', b'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('application', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.ApiApplication')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_apiauthorization',
            },
        ),
        migrations.CreateModel(
            name='ApiGrant',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('code', models.CharField(db_index=True, default=sentry.models.apigrant.generate_code, max_length=64)),
                ('expires_at', models.DateTimeField(db_index=True, default=sentry.models.apigrant.default_expiration)),
                ('redirect_uri', models.CharField(max_length=255)),
                ('scopes', bitfield.models.BitField(((b'project:read', b'project:read'), (b'project:write', b'project:write'), (b'project:admin', b'project:admin'), (b'project:releases', b'project:releases'), (b'team:read', b'team:read'), (b'team:write', b'team:write'), (b'team:admin', b'team:admin'), (b'event:read', b'event:read'), (b'event:write', b'event:write'), (b'event:admin', b'event:admin'), (b'org:read', b'org:read'), (b'org:write', b'org:write'), (b'org:admin', b'org:admin'), (b'member:read', b'member:read'), (b'member:write', b'member:write'), (b'member:admin', b'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('application', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.ApiApplication')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_apigrant',
            },
        ),
        migrations.CreateModel(
            name='ApiKey',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, default=b'Default', max_length=64)),
                ('key', models.CharField(max_length=32, unique=True)),
                ('scopes', bitfield.models.BitField(((b'project:read', b'project:read'), (b'project:write', b'project:write'), (b'project:admin', b'project:admin'), (b'project:releases', b'project:releases'), (b'team:read', b'team:read'), (b'team:write', b'team:write'), (b'team:admin', b'team:admin'), (b'event:read', b'event:read'), (b'event:write', b'event:write'), (b'event:admin', b'event:admin'), (b'org:read', b'org:read'), (b'org:write', b'org:write'), (b'org:admin', b'org:admin'), (b'member:read', b'member:read'), (b'member:write', b'member:write'), (b'member:admin', b'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, 'Active'), (1, 'Inactive')], db_index=True, default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('allowed_origins', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sentry_apikey',
            },
        ),
        migrations.CreateModel(
            name='ApiToken',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('scopes', bitfield.models.BitField(((b'project:read', b'project:read'), (b'project:write', b'project:write'), (b'project:admin', b'project:admin'), (b'project:releases', b'project:releases'), (b'team:read', b'team:read'), (b'team:write', b'team:write'), (b'team:admin', b'team:admin'), (b'event:read', b'event:read'), (b'event:write', b'event:write'), (b'event:admin', b'event:admin'), (b'org:read', b'org:read'), (b'org:write', b'org:write'), (b'org:admin', b'org:admin'), (b'member:read', b'member:read'), (b'member:write', b'member:write'), (b'member:admin', b'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('token', models.CharField(default=sentry.models.apitoken.generate_token, max_length=64, unique=True)),
                ('refresh_token', models.CharField(default=sentry.models.apitoken.generate_token, max_length=64, null=True, unique=True)),
                ('expires_at', models.DateTimeField(default=sentry.models.apitoken.default_expiration, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('application', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.ApiApplication')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_apitoken',
            },
        ),
        migrations.CreateModel(
            name='AssistantActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guide_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('viewed_ts', models.DateTimeField(null=True)),
                ('dismissed_ts', models.DateTimeField(null=True)),
                ('useful', models.NullBooleanField()),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_assistant_activity',
            },
        ),
        migrations.CreateModel(
            name='AuditLogEntry',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('actor_label', models.CharField(blank=True, max_length=64, null=True)),
                ('target_object', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('event', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'member.invite'), (2, b'member.add'), (3, b'member.accept-invite'), (5, b'member.remove'), (4, b'member.edit'), (6, b'member.join-team'), (7, b'member.leave-team'), (8, b'member.pending'), (20, b'team.create'), (21, b'team.edit'), (22, b'team.remove'), (30, b'project.create'), (31, b'project.edit'), (32, b'project.remove'), (33, b'project.set-public'), (34, b'project.set-private'), (35, b'project.request-transfer'), (36, b'project.accept-transfer'), (10, b'org.create'), (11, b'org.edit'), (12, b'org.remove'), (13, b'org.restore'), (40, b'tagkey.remove'), (50, b'projectkey.create'), (51, b'projectkey.edit'), (52, b'projectkey.remove'), (53, b'projectkey.enable'), (53, b'projectkey.disable'), (60, b'sso.enable'), (61, b'sso.disable'), (62, b'sso.edit'), (63, b'sso-identity.link'), (70, b'api-key.create'), (71, b'api-key.edit'), (72, b'api-key.remove'), (80, b'rule.create'), (81, b'rule.edit'), (82, b'rule.remove'), (100, b'serivcehook.create'), (101, b'serivcehook.edit'), (102, b'serivcehook.remove'), (103, b'serivcehook.enable'), (104, b'serivcehook.disable'), (110, b'integration.add'), (111, b'integration.edit'), (112, b'integration.remove'), (113, b'sentry-app.add'), (115, b'sentry-app.remove'), (116, b'sentry-app.install'), (117, b'sentry-app.uninstall'), (90, b'ondemand.edit'), (91, b'trial.started'), (92, b'plan.changed')])),
                ('ip_address', models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField()),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('actor', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audit_actors', to=settings.AUTH_USER_MODEL)),
                ('actor_key', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.ApiKey')),
            ],
            options={
                'db_table': 'sentry_auditlogentry',
            },
        ),
        migrations.CreateModel(
            name='Authenticator',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedAutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, verbose_name='created at')),
                ('last_used_at', models.DateTimeField(null=True, verbose_name='last used at')),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, 'Recovery Codes'), (1, 'Authenticator App'), (2, 'Text Message'), (3, 'U2F (Universal 2nd Factor)')])),
                ('config', sentry.db.models.fields.encrypted.EncryptedPickledObjectField(editable=False)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'auth_authenticator',
                'verbose_name': 'authenticator',
                'verbose_name_plural': 'authenticators',
            },
        ),
        migrations.CreateModel(
            name='AuthIdentity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(max_length=128)),
                ('data', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('last_verified', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_synced', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_authidentity',
            },
        ),
        migrations.CreateModel(
            name='AuthProvider',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('provider', models.CharField(max_length=128)),
                ('config', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('sync_time', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('last_sync', models.DateTimeField(null=True)),
                ('default_role', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=50)),
                ('default_global_access', models.BooleanField(default=True)),
                ('flags', bitfield.models.BitField(((b'allow_unlinked', b'Grant access to members who have not linked SSO accounts.'),), default=0)),
            ],
            options={
                'db_table': 'sentry_authprovider',
            },
        ),
        migrations.CreateModel(
            name='Broadcast',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('upstream_id', models.CharField(blank=True, max_length=32, null=True)),
                ('title', models.CharField(max_length=32)),
                ('message', models.CharField(max_length=256)),
                ('link', models.URLField(blank=True, null=True)),
                ('is_active', models.BooleanField(db_index=True, default=True)),
                ('date_expires', models.DateTimeField(blank=True, default=sentry.models.broadcast.default_expiration, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_broadcast',
            },
        ),
        migrations.CreateModel(
            name='BroadcastSeen',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('broadcast', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Broadcast')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_broadcastseen',
            },
        ),
        migrations.CreateModel(
            name='Commit',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('repository_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('key', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('message', models.TextField(null=True)),
            ],
            options={
                'db_table': 'sentry_commit',
            },
        ),
        migrations.CreateModel(
            name='CommitAuthor',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=128, null=True)),
                ('email', models.EmailField(max_length=75)),
                ('external_id', models.CharField(max_length=164, null=True)),
            ],
            options={
                'db_table': 'sentry_commitauthor',
            },
        ),
        migrations.CreateModel(
            name='CommitFileChange',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('filename', models.TextField()),
                ('type', models.CharField(choices=[(b'A', b'Added'), (b'D', b'Deleted'), (b'M', b'Modified')], max_length=1)),
                ('commit', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Commit')),
            ],
            options={
                'db_table': 'sentry_commitfilechange',
            },
        ),
        migrations.CreateModel(
            name='Counter',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('value', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
            ],
            options={
                'db_table': 'sentry_projectcounter',
            },
        ),
        migrations.CreateModel(
            name='Dashboard',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('title', models.CharField(max_length=255)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'active'), (1, b'disabled'), (2, b'pending_deletion'), (3, b'deletion_in_progress')], default=0)),
                ('created_by', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_dashboard',
            },
        ),
        migrations.CreateModel(
            name='DeletedOrganization',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('actor_label', models.CharField(max_length=64, null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('actor_key', models.CharField(max_length=32, null=True)),
                ('ip_address', models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ('date_deleted', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(null=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('name', models.CharField(max_length=64, null=True)),
                ('slug', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'sentry_deletedorganization',
            },
        ),
        migrations.CreateModel(
            name='DeletedProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('actor_label', models.CharField(max_length=64, null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('actor_key', models.CharField(max_length=32, null=True)),
                ('ip_address', models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ('date_deleted', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(null=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('slug', models.CharField(max_length=50, null=True)),
                ('name', models.CharField(max_length=200, null=True)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('organization_name', models.CharField(max_length=64, null=True)),
                ('organization_slug', models.CharField(max_length=50, null=True)),
                ('platform', models.CharField(max_length=64, null=True)),
            ],
            options={
                'db_table': 'sentry_deletedproject',
            },
        ),
        migrations.CreateModel(
            name='DeletedTeam',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('actor_label', models.CharField(max_length=64, null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('actor_key', models.CharField(max_length=32, null=True)),
                ('ip_address', models.GenericIPAddressField(null=True, unpack_ipv4=True)),
                ('date_deleted', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_created', models.DateTimeField(null=True)),
                ('reason', models.TextField(blank=True, null=True)),
                ('name', models.CharField(max_length=64, null=True)),
                ('slug', models.CharField(max_length=50, null=True)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('organization_name', models.CharField(max_length=64, null=True)),
                ('organization_slug', models.CharField(max_length=50, null=True)),
            ],
            options={
                'db_table': 'sentry_deletedteam',
            },
        ),
        migrations.CreateModel(
            name='Deploy',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('environment_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('date_finished', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_started', models.DateTimeField(blank=True, null=True)),
                ('name', models.CharField(blank=True, max_length=64, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('notified', models.NullBooleanField(db_index=True, default=False)),
            ],
            options={
                'db_table': 'sentry_deploy',
            },
        ),
        migrations.CreateModel(
            name='DiscoverSavedQuery',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255)),
                ('query', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('date_created', models.DateTimeField(auto_now_add=True)),
                ('date_updated', models.DateTimeField(auto_now=True)),
                ('created_by', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_discoversavedquery',
            },
        ),
        migrations.CreateModel(
            name='DiscoverSavedQueryProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('discover_saved_query', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.DiscoverSavedQuery')),
            ],
            options={
                'db_table': 'sentry_discoversavedqueryproject',
            },
        ),
        migrations.CreateModel(
            name='Distribution',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_distribution',
            },
        ),
        migrations.CreateModel(
            name='Email',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('email', sentry.db.models.fields.citext.CIEmailField(max_length=75, unique=True, verbose_name='email address')),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_email',
            },
        ),
        migrations.CreateModel(
            name='Environment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('name', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_environment',
            },
        ),
        migrations.CreateModel(
            name='EnvironmentProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('is_hidden', models.NullBooleanField()),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment')),
            ],
            options={
                'db_table': 'sentry_environmentproject',
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(blank=True, null=True)),
                ('event_id', models.CharField(db_column=b'message_id', max_length=32, null=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(blank=True, null=True)),
                ('message', models.TextField()),
                ('platform', models.CharField(max_length=64, null=True)),
                ('datetime', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('time_spent', sentry.db.models.fields.bounded.BoundedIntegerField(null=True)),
                ('data', sentry.db.models.fields.node.NodeField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sentry_message',
                'verbose_name': 'message',
                'verbose_name_plural': 'messages',
            },
        ),
        migrations.CreateModel(
            name='EventAttachment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True)),
                ('event_id', models.CharField(db_index=True, max_length=32)),
                ('name', models.TextField()),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_eventattachment',
            },
        ),
        migrations.CreateModel(
            name='EventMapping',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('event_id', models.CharField(max_length=32)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_eventmapping',
            },
        ),
        migrations.CreateModel(
            name='EventProcessingIssue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sentry_eventprocessingissue',
            },
        ),
        migrations.CreateModel(
            name='EventTag',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('event_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('key_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('value_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_eventtag',
            },
        ),
        migrations.CreateModel(
            name='EventUser',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('hash', models.CharField(max_length=32)),
                ('ident', models.CharField(max_length=128, null=True)),
                ('email', models.EmailField(max_length=75, null=True)),
                ('username', models.CharField(max_length=128, null=True)),
                ('name', models.CharField(max_length=128, null=True)),
                ('ip_address', models.GenericIPAddressField(null=True)),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_eventuser',
            },
        ),
        migrations.CreateModel(
            name='ExternalIssue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('integration_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('key', models.CharField(max_length=128)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('metadata', sentry.db.models.fields.jsonfield.JSONField(null=True)),
            ],
            options={
                'db_table': 'sentry_externalissue',
            },
        ),
        migrations.CreateModel(
            name='FeatureAdoption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('feature_id', models.PositiveIntegerField(choices=[(0, b'Python'), (1, b'JavaScript'), (2, b'Node.js'), (3, b'Ruby'), (4, b'Java'), (5, b'Cocoa'), (6, b'Objective-C'), (7, b'PHP'), (8, b'Go'), (9, b'C#'), (10, b'Perl'), (11, b'Elixir'), (12, b'CFML'), (13, b'Groovy'), (14, b'CSP Reports'), (20, b'Flask'), (21, b'Django'), (22, b'Celery'), (23, b'Bottle'), (24, b'Pylons'), (25, b'Tornado'), (26, b'web.py'), (27, b'Zope'), (40, b'First Event'), (41, b'Release Tracking'), (42, b'Environment Tracking'), (43, b'User Tracking'), (44, b'Custom Tags'), (45, b'Source Maps'), (46, b'User Feedback'), (48, b'Breadcrumbs'), (49, b'Resolve with Commit'), (60, b'First Project'), (61, b'Invite Team'), (62, b'Assign Issue'), (63, b'Resolve in Next Release'), (64, b'Advanced Search'), (65, b'Saved Search'), (66, b'Inbound Filters'), (67, b'Alert Rules'), (68, b'Issue Tracker Integration'), (69, b'Notification Integration'), (70, b'Delete and Discard Future Events'), (71, b'Link a Repository'), (72, b'Ownership Rules'), (73, b'Ignore Issue'), (80, b'SSO'), (81, b'Data Scrubbers'), (90, b'Create Release Using API'), (91, b'Create Deploy Using API')])),
                ('date_completed', models.DateTimeField(default=django.utils.timezone.now)),
                ('complete', models.BooleanField(default=False)),
                ('applicable', models.BooleanField(default=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
            ],
            options={
                'db_table': 'sentry_featureadoption',
            },
        ),
        migrations.CreateModel(
            name='File',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('type', models.CharField(max_length=64)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('headers', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('size', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('checksum', models.CharField(db_index=True, max_length=40, null=True)),
                ('path', models.TextField(null=True)),
            ],
            options={
                'db_table': 'sentry_file',
            },
        ),
        migrations.CreateModel(
            name='FileBlob',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('path', models.TextField(null=True)),
                ('size', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('checksum', models.CharField(max_length=40, unique=True)),
                ('timestamp', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_fileblob',
            },
        ),
        migrations.CreateModel(
            name='FileBlobIndex',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('offset', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('blob', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.FileBlob')),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.File')),
            ],
            options={
                'db_table': 'sentry_fileblobindex',
            },
        ),
        migrations.CreateModel(
            name='FileBlobOwner',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('blob', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.FileBlob')),
            ],
            options={
                'db_table': 'sentry_fileblobowner',
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('logger', models.CharField(blank=True, db_index=True, default=b'', max_length=64)),
                ('level', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(blank=True, choices=[(0, b'sample'), (40, b'error'), (10, b'debug'), (50, b'fatal'), (20, b'info'), (30, b'warning')], db_index=True, default=40)),
                ('message', models.TextField()),
                ('culprit', models.CharField(blank=True, db_column=b'view', max_length=200, null=True)),
                ('num_comments', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True)),
                ('platform', models.CharField(max_length=64, null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, 'Unresolved'), (1, 'Resolved'), (2, 'Ignored')], db_index=True, default=0)),
                ('times_seen', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, default=1)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('first_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('resolved_at', models.DateTimeField(db_index=True, null=True)),
                ('active_at', models.DateTimeField(db_index=True, null=True)),
                ('time_spent_total', sentry.db.models.fields.bounded.BoundedIntegerField(default=0)),
                ('time_spent_count', sentry.db.models.fields.bounded.BoundedIntegerField(default=0)),
                ('score', sentry.db.models.fields.bounded.BoundedIntegerField(default=0)),
                ('is_public', models.NullBooleanField(default=False)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField(blank=True, null=True)),
                ('short_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
            ],
            options={
                'db_table': 'sentry_groupedmessage',
                'verbose_name': 'grouped message',
                'verbose_name_plural': 'grouped messages',
                'permissions': (('can_view', 'Can view'),),
            },
        ),
        migrations.CreateModel(
            name='GroupAssignee',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignee_set', to='sentry.Group', unique=True)),
            ],
            options={
                'db_table': 'sentry_groupasignee',
            },
        ),
        migrations.CreateModel(
            name='GroupBookmark',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmark_set', to='sentry.Group')),
            ],
            options={
                'db_table': 'sentry_groupbookmark',
            },
        ),
        migrations.CreateModel(
            name='GroupCommitResolution',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('group_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('commit_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('datetime', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_groupcommitresolution',
            },
        ),
        migrations.CreateModel(
            name='GroupEmailThread',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=75)),
                ('msgid', models.CharField(max_length=100)),
                ('date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groupemail_set', to='sentry.Group')),
            ],
            options={
                'db_table': 'sentry_groupemailthread',
            },
        ),
        migrations.CreateModel(
            name='GroupEnvironment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('first_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now, null=True)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment')),
            ],
            options={
                'db_table': 'sentry_groupenvironment',
            },
        ),
        migrations.CreateModel(
            name='GroupHash',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('hash', models.CharField(max_length=32)),
                ('group_tombstone_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
                ('state', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, 'Locked (Migration in Progress)')], null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Group')),
            ],
            options={
                'db_table': 'sentry_grouphash',
            },
        ),
        migrations.CreateModel(
            name='GroupLink',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('linked_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, 'Commit'), (2, 'Pull Request'), (3, 'Tracker Issue')], default=1)),
                ('linked_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('relationship', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, 'Resolves'), (2, 'Linked')], default=2)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('datetime', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_grouplink',
            },
        ),
        migrations.CreateModel(
            name='GroupMeta',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64)),
                ('value', models.TextField()),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Group')),
            ],
            options={
                'db_table': 'sentry_groupmeta',
            },
        ),
        migrations.CreateModel(
            name='GroupRedirect',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('previous_group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(unique=True)),
            ],
            options={
                'db_table': 'sentry_groupredirect',
            },
        ),
        migrations.CreateModel(
            name='GroupRelease',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('group_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('release_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('environment', models.CharField(default=b'', max_length=64)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_grouprelease',
            },
        ),
        migrations.CreateModel(
            name='GroupResolution',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'in_next_release'), (0, b'in_release')], null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('datetime', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, 'Pending'), (1, 'Resolved')], default=0)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Group', unique=True)),
            ],
            options={
                'db_table': 'sentry_groupresolution',
            },
        ),
        migrations.CreateModel(
            name='GroupRuleStatus',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('status', models.PositiveSmallIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_active', models.DateTimeField(null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Group')),
            ],
            options={
                'db_table': 'sentry_grouprulestatus',
            },
        ),
        migrations.CreateModel(
            name='GroupSeen',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Group')),
            ],
            options={
                'db_table': 'sentry_groupseen',
            },
        ),
        migrations.CreateModel(
            name='GroupShare',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('uuid', models.CharField(default=sentry.models.groupshare.default_uuid, max_length=32, unique=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Group', unique=True)),
            ],
            options={
                'db_table': 'sentry_groupshare',
            },
        ),
        migrations.CreateModel(
            name='GroupSnooze',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('until', models.DateTimeField(null=True)),
                ('count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('window', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('user_count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('user_window', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('state', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Group', unique=True)),
            ],
            options={
                'db_table': 'sentry_groupsnooze',
            },
        ),
        migrations.CreateModel(
            name='GroupSubscription',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('reason', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_set', to='sentry.Group')),
            ],
            options={
                'db_table': 'sentry_groupsubscription',
            },
        ),
        migrations.CreateModel(
            name='GroupTagKey',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('key', models.CharField(max_length=32)),
                ('values_seen', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
            ],
            options={
                'db_table': 'sentry_grouptagkey',
            },
        ),
        migrations.CreateModel(
            name='GroupTagValue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('times_seen', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('key', models.CharField(max_length=32)),
                ('value', models.CharField(max_length=200)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now, null=True)),
                ('first_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now, null=True)),
            ],
            options={
                'db_table': 'sentry_messagefiltervalue',
            },
        ),
        migrations.CreateModel(
            name='GroupTombstone',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('previous_group_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(unique=True)),
                ('level', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(blank=True, choices=[(0, b'sample'), (40, b'error'), (10, b'debug'), (50, b'fatal'), (20, b'info'), (30, b'warning')], default=40)),
                ('message', models.TextField()),
                ('culprit', models.CharField(blank=True, max_length=200, null=True)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField(blank=True, null=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
            ],
            options={
                'db_table': 'sentry_grouptombstone',
            },
        ),
        migrations.CreateModel(
            name='Identity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('external_id', models.CharField(max_length=64)),
                ('data', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('scopes', sentry.db.models.fields.array.ArrayField(null=True)),
                ('date_verified', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_identity',
            },
        ),
        migrations.CreateModel(
            name='IdentityProvider',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=64)),
                ('config', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('external_id', models.CharField(max_length=64, null=True)),
            ],
            options={
                'db_table': 'sentry_identityprovider',
            },
        ),
        migrations.CreateModel(
            name='Integration',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('provider', models.CharField(max_length=64)),
                ('external_id', models.CharField(max_length=64)),
                ('name', models.CharField(max_length=200)),
                ('metadata', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'active'), (1, b'disabled'), (2, b'pending_deletion'), (3, b'deletion_in_progress')], default=0, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
            ],
            options={
                'db_table': 'sentry_integration',
            },
        ),
        migrations.CreateModel(
            name='IntegrationExternalProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_integration_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('name', models.CharField(max_length=128)),
                ('external_id', models.CharField(max_length=64)),
                ('resolved_status', models.CharField(max_length=64)),
                ('unresolved_status', models.CharField(max_length=64)),
            ],
            options={
                'db_table': 'sentry_integrationexternalproject',
            },
        ),
        migrations.CreateModel(
            name='LatestRelease',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('repository_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('environment_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('release_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('deploy_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('commit_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
            ],
            options={
                'db_table': 'sentry_latestrelease',
            },
        ),
        migrations.CreateModel(
            name='LostPasswordHash',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('hash', models.CharField(max_length=32)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'db_table': 'sentry_lostpasswordhash',
            },
        ),
        migrations.CreateModel(
            name='Monitor',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', sentry.db.models.fields.uuid.UUIDField(editable=False, max_length=32, unique=True)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=128)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'active'), (1, b'disabled'), (2, b'pending_deletion'), (3, b'deletion_in_progress'), (4, b'ok'), (5, b'error')], default=0)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'unknown'), (1, b'health_check'), (2, b'heartbeat'), (3, b'cron_job')], default=0)),
                ('config', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('next_checkin', models.DateTimeField(null=True)),
                ('last_checkin', models.DateTimeField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_monitor',
            },
        ),
        migrations.CreateModel(
            name='MonitorCheckIn',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', sentry.db.models.fields.uuid.UUIDField(editable=False, max_length=32, unique=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'unknown'), (1, b'ok'), (2, b'error'), (3, b'in_progress')], default=0)),
                ('config', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('duration', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_monitorcheckin',
            },
        ),
        migrations.CreateModel(
            name='MonitorLocation',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', sentry.db.models.fields.uuid.UUIDField(editable=False, max_length=32, unique=True)),
                ('name', models.CharField(max_length=128)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_monitorlocation',
            },
        ),
        migrations.CreateModel(
            name='Option',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64, unique=True)),
                ('value', sentry.db.models.fields.encrypted.EncryptedPickledObjectField(editable=False)),
                ('last_updated', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_option',
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=64)),
                ('slug', models.SlugField(unique=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'active'), (1, b'pending deletion'), (2, b'deletion in progress')], default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('default_role', models.CharField(choices=[(b'member', b'Member'), (b'admin', b'Admin'), (b'manager', b'Manager'), (b'owner', b'Owner')], default=b'member', max_length=32)),
                ('flags', bitfield.models.BitField(((b'allow_joinleave', b'Allow members to join and leave teams without requiring approval.'), (b'enhanced_privacy', b'Enable enhanced privacy controls to limit personally identifiable information (PII) as well as source code in things like notifications.'), (b'disable_shared_issues', b'Disable sharing of limited details on issues to anonymous users.'), (b'early_adopter', b'Enable early adopter status, gaining access to features prior to public release.'), (b'require_2fa', b'Require and enforce two-factor authentication for all members.'), (b'disable_new_visibility_features', b'Temporarily opt out of new visibility features and ui')), default=1)),
            ],
            options={
                'db_table': 'sentry_organization',
            },
        ),
        migrations.CreateModel(
            name='OrganizationAccessRequest',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sentry_organizationaccessrequest',
            },
        ),
        migrations.CreateModel(
            name='OrganizationAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(choices=[(0, b'letter_avatar'), (1, b'upload')], default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.File', unique=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.Organization', unique=True)),
            ],
            options={
                'db_table': 'sentry_organizationavatar',
            },
        ),
        migrations.CreateModel(
            name='OrganizationIntegration',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('config', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('default_auth_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'active'), (1, b'disabled'), (2, b'pending_deletion'), (3, b'deletion_in_progress')], default=0)),
                ('integration', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Integration')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
            ],
            options={
                'db_table': 'sentry_organizationintegration',
            },
        ),
        migrations.CreateModel(
            name='OrganizationMember',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(blank=True, max_length=75, null=True)),
                ('role', models.CharField(choices=[(b'member', b'Member'), (b'admin', b'Admin'), (b'manager', b'Manager'), (b'owner', b'Owner')], default=b'member', max_length=32)),
                ('flags', bitfield.models.BitField(((b'sso:linked', b'sso:linked'), (b'sso:invalid', b'sso:invalid')), default=0)),
                ('token', models.CharField(blank=True, max_length=64, null=True, unique=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('token_expires_at', models.DateTimeField(default=None, null=True)),
                ('has_global_access', models.BooleanField(default=True)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(blank=True, default=50)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='member_set', to='sentry.Organization')),
            ],
            options={
                'db_table': 'sentry_organizationmember',
            },
        ),
        migrations.CreateModel(
            name='OrganizationMemberTeam',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedAutoField(primary_key=True, serialize=False)),
                ('is_active', models.BooleanField(default=True)),
                ('organizationmember', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.OrganizationMember')),
            ],
            options={
                'db_table': 'sentry_organizationmember_teams',
            },
        ),
        migrations.CreateModel(
            name='OrganizationOnboardingTask',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('task', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(2, b'First event'), (3, b'Invite member'), (9, b'Issue tracker'), (10, b'Notification services'), (4, b'Second platform'), (5, b'User context'), (7, b'Upload sourcemaps'), (6, b'Release tracking'), (8, b'User reports')])),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'Complete'), (2, b'Pending'), (3, b'Skipped')])),
                ('date_completed', models.DateTimeField(default=django.utils.timezone.now)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(blank=True, null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_organizationonboardingtask',
            },
        ),
        migrations.CreateModel(
            name='OrganizationOption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64)),
                ('value', sentry.db.models.fields.encrypted.EncryptedPickledObjectField(editable=False)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
            ],
            options={
                'db_table': 'sentry_organizationoptions',
            },
        ),
        migrations.CreateModel(
            name='PlatformExternalIssue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('group_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('service_type', models.CharField(max_length=64)),
                ('display_name', models.TextField()),
                ('web_url', models.URLField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_platformexternalissue',
            },
        ),
        migrations.CreateModel(
            name='ProcessingIssue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('checksum', models.CharField(db_index=True, max_length=40)),
                ('type', models.CharField(max_length=30)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField()),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_processingissue',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('slug', models.SlugField(null=True)),
                ('name', models.CharField(max_length=200)),
                ('forced_color', models.CharField(blank=True, max_length=6, null=True)),
                ('public', models.BooleanField(default=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, 'Active'), (2, 'Pending Deletion'), (3, 'Deletion in Progress')], db_index=True, default=0)),
                ('first_event', models.DateTimeField(null=True)),
                ('flags', bitfield.models.BitField(((b'has_releases', b'This Project has sent release data'),), default=0, null=True)),
                ('platform', models.CharField(max_length=64, null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
            ],
            options={
                'db_table': 'sentry_project',
            },
            bases=(models.Model, sentry.db.mixin.PendingDeletionMixin),
        ),
        migrations.CreateModel(
            name='ProjectAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(choices=[(0, b'letter_avatar'), (1, b'upload')], default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.File', unique=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.Project', unique=True)),
            ],
            options={
                'db_table': 'sentry_projectavatar',
            },
        ),
        migrations.CreateModel(
            name='ProjectBookmark',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_projectbookmark',
            },
        ),
        migrations.CreateModel(
            name='ProjectCfiCacheFile',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('checksum', models.CharField(max_length=40)),
                ('version', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('cache_file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.File')),
            ],
            options={
                'abstract': False,
                'db_table': 'sentry_projectcficachefile',
            },
        ),
        migrations.CreateModel(
            name='ProjectDebugFile',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('object_name', models.TextField()),
                ('cpu_name', models.CharField(max_length=40)),
                ('debug_id', models.CharField(db_column=b'uuid', max_length=64)),
                ('code_id', models.CharField(max_length=64, null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.File')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_projectdsymfile',
            },
        ),
        migrations.CreateModel(
            name='ProjectIntegration',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('config', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('integration', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Integration')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_projectintegration',
            },
        ),
        migrations.CreateModel(
            name='ProjectKey',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('label', models.CharField(blank=True, max_length=64, null=True)),
                ('public_key', models.CharField(max_length=32, null=True, unique=True)),
                ('secret_key', models.CharField(max_length=32, null=True, unique=True)),
                ('roles', bitfield.models.BitField(((b'store', b'Event API access'), (b'api', b'Web API access')), default=1)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, 'Active'), (1, 'Inactive')], db_index=True, default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('rate_limit_count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('rate_limit_window', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='key_set', to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_projectkey',
            },
        ),
        migrations.CreateModel(
            name='ProjectOption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64)),
                ('value', sentry.db.models.fields.encrypted.EncryptedPickledObjectField(editable=False)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_projectoptions',
            },
        ),
        migrations.CreateModel(
            name='ProjectOwnership',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('raw', models.TextField(null=True)),
                ('schema', sentry.db.models.fields.jsonfield.JSONField(null=True)),
                ('fallthrough', models.BooleanField(default=True)),
                ('date_created', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project', unique=True)),
            ],
            options={
                'db_table': 'sentry_projectownership',
            },
        ),
        migrations.CreateModel(
            name='ProjectPlatform',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('platform', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_projectplatform',
            },
        ),
        migrations.CreateModel(
            name='ProjectRedirect',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('redirect_slug', models.SlugField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_projectredirect',
            },
        ),
        migrations.CreateModel(
            name='ProjectSymCacheFile',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('checksum', models.CharField(max_length=40)),
                ('version', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('cache_file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.File')),
                ('debug_file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_column=b'dsym_file_id', on_delete=django.db.models.deletion.DO_NOTHING, to='sentry.ProjectDebugFile')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'abstract': False,
                'db_table': 'sentry_projectsymcachefile',
            },
        ),
        migrations.CreateModel(
            name='ProjectTeam',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_projectteam',
            },
        ),
        migrations.CreateModel(
            name='PromptsActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('feature', models.CharField(max_length=64)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default={})),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_promptsactivity',
            },
        ),
        migrations.CreateModel(
            name='PullRequest',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('repository_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('key', models.CharField(max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('title', models.TextField(null=True)),
                ('message', models.TextField(null=True)),
                ('merge_commit_sha', models.CharField(max_length=64, null=True)),
                ('author', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.CommitAuthor')),
            ],
            options={
                'db_table': 'sentry_pull_request',
            },
        ),
        migrations.CreateModel(
            name='PullRequestCommit',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('commit', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Commit')),
                ('pull_request', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.PullRequest')),
            ],
            options={
                'db_table': 'sentry_pullrequest_commit',
            },
        ),
        migrations.CreateModel(
            name='RawEvent',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('event_id', models.CharField(max_length=32, null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('data', sentry.db.models.fields.node.NodeField(blank=True, null=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_rawevent',
            },
        ),
        migrations.CreateModel(
            name='RecentSearch',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.PositiveSmallIntegerField()),
                ('query', models.TextField()),
                ('query_hash', models.CharField(max_length=32)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_recentsearch',
            },
        ),
        migrations.CreateModel(
            name='Relay',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('relay_id', models.CharField(max_length=64, unique=True)),
                ('public_key', models.CharField(max_length=200)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_internal', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'sentry_relay',
            },
        ),
        migrations.CreateModel(
            name='Release',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('version', models.CharField(max_length=250)),
                ('ref', models.CharField(blank=True, max_length=250, null=True)),
                ('url', models.URLField(blank=True, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_started', models.DateTimeField(blank=True, null=True)),
                ('date_released', models.DateTimeField(blank=True, null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default={})),
                ('new_groups', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('commit_count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True)),
                ('last_commit_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('authors', sentry.db.models.fields.array.ArrayField(null=True)),
                ('total_deploys', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True)),
                ('last_deploy_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('owner', sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_release',
            },
        ),
        migrations.CreateModel(
            name='ReleaseCommit',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('order', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('commit', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Commit')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Release')),
            ],
            options={
                'db_table': 'sentry_releasecommit',
            },
        ),
        migrations.CreateModel(
            name='ReleaseEnvironment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Release')),
            ],
            options={
                'db_table': 'sentry_environmentrelease',
            },
        ),
        migrations.CreateModel(
            name='ReleaseFile',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('ident', models.CharField(max_length=40)),
                ('name', models.TextField()),
                ('dist', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Distribution')),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.File')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Release')),
            ],
            options={
                'db_table': 'sentry_releasefile',
            },
        ),
        migrations.CreateModel(
            name='ReleaseHeadCommit',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('repository_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('commit', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Commit')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Release')),
            ],
            options={
                'db_table': 'sentry_releaseheadcommit',
            },
        ),
        migrations.CreateModel(
            name='ReleaseProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('new_groups', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0, null=True)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Release')),
            ],
            options={
                'db_table': 'sentry_release_project',
            },
        ),
        migrations.CreateModel(
            name='ReleaseProjectEnvironment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('new_issues_count', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('last_deploy_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
                ('release', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Release')),
            ],
            options={
                'db_table': 'sentry_releaseprojectenvironment',
            },
        ),
        migrations.CreateModel(
            name='Repository',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('name', models.CharField(max_length=200)),
                ('url', models.URLField(null=True)),
                ('provider', models.CharField(max_length=64, null=True)),
                ('external_id', models.CharField(max_length=64, null=True)),
                ('config', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'active'), (1, b'disabled'), (2, b'pending_deletion'), (3, b'deletion_in_progress')], db_index=True, default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('integration_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
            ],
            options={
                'db_table': 'sentry_repository',
            },
            bases=(models.Model, sentry.db.mixin.PendingDeletionMixin),
        ),
        migrations.CreateModel(
            name='ReprocessingReport',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('event_id', models.CharField(max_length=32, null=True)),
                ('datetime', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_reprocessingreport',
            },
        ),
        migrations.CreateModel(
            name='Rule',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('environment_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True)),
                ('label', models.CharField(max_length=64)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField()),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'Active'), (1, b'Inactive')], db_index=True, default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_rule',
            },
        ),
        migrations.CreateModel(
            name='SavedSearch',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.PositiveSmallIntegerField(default=0, null=True)),
                ('name', models.CharField(max_length=128)),
                ('query', models.TextField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_default', models.BooleanField(default=False)),
                ('is_global', models.NullBooleanField(db_index=True, default=False)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('owner', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_savedsearch',
            },
        ),
        migrations.CreateModel(
            name='SavedSearchUserDefault',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
                ('savedsearch', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.SavedSearch')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_savedsearch_userdefault',
            },
        ),
        migrations.CreateModel(
            name='ScheduledDeletion',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', models.CharField(default=sentry.models.scheduledeletion.default_guid, max_length=32, unique=True)),
                ('app_label', models.CharField(max_length=64)),
                ('model_name', models.CharField(max_length=64)),
                ('object_id', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_scheduled', models.DateTimeField(default=sentry.models.scheduledeletion.default_date_schedule)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default={})),
                ('in_progress', models.BooleanField(default=False)),
                ('aborted', models.BooleanField(default=False)),
            ],
            options={
                'db_table': 'sentry_scheduleddeletion',
            },
        ),
        migrations.CreateModel(
            name='ScheduledJob',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=128)),
                ('payload', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_scheduled', models.DateTimeField()),
            ],
            options={
                'db_table': 'sentry_scheduledjob',
            },
        ),
        migrations.CreateModel(
            name='SentryApp',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('scopes', bitfield.models.BitField(((b'project:read', b'project:read'), (b'project:write', b'project:write'), (b'project:admin', b'project:admin'), (b'project:releases', b'project:releases'), (b'team:read', b'team:read'), (b'team:write', b'team:write'), (b'team:admin', b'team:admin'), (b'event:read', b'event:read'), (b'event:write', b'event:write'), (b'event:admin', b'event:admin'), (b'org:read', b'org:read'), (b'org:write', b'org:write'), (b'org:admin', b'org:admin'), (b'member:read', b'member:read'), (b'member:write', b'member:write'), (b'member:admin', b'member:admin')), default=None)),
                ('scope_list', sentry.db.models.fields.array.ArrayField(null=True)),
                ('name', models.TextField()),
                ('slug', models.CharField(max_length=64, unique=True)),
                ('author', models.TextField(null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'unpublished'), (1, b'published')], db_index=True, default=0)),
                ('uuid', models.CharField(default=sentry.models.sentryapp.default_uuid, max_length=64)),
                ('redirect_url', models.URLField(null=True)),
                ('webhook_url', models.URLField()),
                ('is_alertable', models.BooleanField(default=False)),
                ('events', sentry.db.models.fields.array.ArrayField(null=True)),
                ('overview', models.TextField(null=True)),
                ('schema', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('application', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentry_app', to='sentry.ApiApplication')),
                ('owner', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='owned_sentry_apps', to='sentry.Organization')),
                ('proxy_user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentry_app', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_sentryapp',
            },
        ),
        migrations.CreateModel(
            name='SentryAppAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(choices=[(0, b'letter_avatar'), (1, b'upload')], default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.File', unique=True)),
                ('sentry_app', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.SentryApp', unique=True)),
            ],
            options={
                'db_table': 'sentry_sentryappavatar',
            },
        ),
        migrations.CreateModel(
            name='SentryAppComponent',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('uuid', sentry.db.models.fields.uuid.UUIDField(editable=False, max_length=32, unique=True)),
                ('type', models.CharField(max_length=64)),
                ('schema', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('sentry_app', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='components', to='sentry.SentryApp')),
            ],
            options={
                'db_table': 'sentry_sentryappcomponent',
            },
        ),
        migrations.CreateModel(
            name='SentryAppInstallation',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_deleted', models.DateTimeField(blank=True, null=True)),
                ('uuid', models.CharField(default=sentry.models.sentryappinstallation.default_uuid, max_length=64)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('api_grant', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentry_app_installation', to='sentry.ApiGrant')),
                ('authorization', models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentry_app_installation', to='sentry.ApiAuthorization')),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sentry_app_installations', to='sentry.Organization')),
                ('sentry_app', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='installations', to='sentry.SentryApp')),
            ],
            options={
                'db_table': 'sentry_sentryappinstallation',
            },
        ),
        migrations.CreateModel(
            name='ServiceHook',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('guid', models.CharField(max_length=32, null=True, unique=True)),
                ('actor_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('organization_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True, null=True)),
                ('url', models.URLField(max_length=512)),
                ('secret', sentry.db.models.fields.encrypted.EncryptedTextField(default=sentry.models.servicehook.generate_secret)),
                ('events', sentry.db.models.fields.array.ArrayField(null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'active'), (1, b'disabled'), (2, b'pending_deletion'), (3, b'deletion_in_progress')], db_index=True, default=0)),
                ('version', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'0')], default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('application', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.ApiApplication')),
            ],
            options={
                'db_table': 'sentry_servicehook',
            },
        ),
        migrations.CreateModel(
            name='ServiceHookProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(db_index=True)),
                ('service_hook', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.ServiceHook')),
            ],
            options={
                'db_table': 'sentry_servicehookproject',
            },
        ),
        migrations.CreateModel(
            name='TagKey',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True)),
                ('key', models.CharField(max_length=32)),
                ('values_seen', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('label', models.CharField(max_length=64, null=True)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, 'Visible'), (1, 'Pending Deletion'), (2, 'Deletion in Progress')], default=0)),
            ],
            options={
                'db_table': 'sentry_filterkey',
            },
        ),
        migrations.CreateModel(
            name='TagValue',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('project_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(db_index=True, null=True)),
                ('key', models.CharField(max_length=32)),
                ('value', models.CharField(max_length=200)),
                ('data', sentry.db.models.fields.gzippeddict.GzippedDictField(blank=True, null=True)),
                ('times_seen', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(default=0)),
                ('last_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now, null=True)),
                ('first_seen', models.DateTimeField(db_index=True, default=django.utils.timezone.now, null=True)),
            ],
            options={
                'db_table': 'sentry_filtervalue',
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('slug', models.SlugField()),
                ('name', models.CharField(max_length=64)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, 'Active'), (1, 'Pending Deletion'), (2, 'Deletion in Progress')], default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
            ],
            options={
                'db_table': 'sentry_team',
            },
        ),
        migrations.CreateModel(
            name='TeamAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(choices=[(0, b'letter_avatar'), (1, b'upload')], default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.File', unique=True)),
                ('team', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to='sentry.Team', unique=True)),
            ],
            options={
                'db_table': 'sentry_teamavatar',
            },
        ),
        migrations.CreateModel(
            name='UserAvatar',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ident', models.CharField(db_index=True, max_length=32, unique=True)),
                ('avatar_type', models.PositiveSmallIntegerField(choices=[(0, b'letter_avatar'), (1, b'upload'), (2, b'gravatar')], default=0)),
                ('file', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.File', unique=True)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='avatar', to=settings.AUTH_USER_MODEL, unique=True)),
            ],
            options={
                'db_table': 'sentry_useravatar',
            },
        ),
        migrations.CreateModel(
            name='UserEmail',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('email', models.EmailField(max_length=75, verbose_name='email address')),
                ('validation_hash', models.CharField(default=sentry.models.useremail.default_validation_hash, max_length=32)),
                ('date_hash_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user has confirmed their email.', verbose_name='verified')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='emails', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_useremail',
            },
        ),
        migrations.CreateModel(
            name='UserIP',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('ip_address', models.GenericIPAddressField()),
                ('country_code', models.CharField(max_length=16, null=True)),
                ('region_code', models.CharField(max_length=16, null=True)),
                ('first_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_userip',
            },
        ),
        migrations.CreateModel(
            name='UserOption',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('key', models.CharField(max_length=64)),
                ('value', sentry.db.models.fields.encrypted.EncryptedPickledObjectField(editable=False)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_useroption',
            },
        ),
        migrations.CreateModel(
            name='UserPermission',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('permission', models.CharField(max_length=32)),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_userpermission',
            },
        ),
        migrations.CreateModel(
            name='UserReport',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('event_user_id', sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True)),
                ('event_id', models.CharField(max_length=32)),
                ('name', models.CharField(max_length=128)),
                ('email', models.EmailField(max_length=75)),
                ('comments', models.TextField()),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment')),
                ('group', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Group')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_userreport',
            },
        ),
        migrations.CreateModel(
            name='Widget',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('order', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('title', models.CharField(max_length=255)),
                ('display_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'line'), (1, b'area'), (2, b'stacked_area'), (3, b'bar'), (4, b'pie'), (5, b'table'), (6, b'world_map'), (7, b'percentage_area_chart')])),
                ('display_options', sentry.db.models.fields.jsonfield.JSONField(default={})),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'active'), (1, b'disabled'), (2, b'pending_deletion'), (3, b'deletion_in_progress')], default=0)),
                ('dashboard', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Dashboard')),
            ],
            options={
                'db_table': 'sentry_widget',
            },
        ),
        migrations.CreateModel(
            name='WidgetDataSource',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'discover_saved_search')])),
                ('name', models.CharField(max_length=255)),
                ('data', sentry.db.models.fields.jsonfield.JSONField(default={})),
                ('order', sentry.db.models.fields.bounded.BoundedPositiveIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('status', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'active'), (1, b'disabled'), (2, b'pending_deletion'), (3, b'deletion_in_progress')], default=0)),
                ('widget', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Widget')),
            ],
            options={
                'db_table': 'sentry_widgetdatasource',
            },
        ),
        migrations.AlterUniqueTogether(
            name='tagvalue',
            unique_together=set([('project_id', 'key', 'value')]),
        ),
        migrations.AlterIndexTogether(
            name='tagvalue',
            index_together=set([('project_id', 'key', 'last_seen')]),
        ),
        migrations.AlterUniqueTogether(
            name='tagkey',
            unique_together=set([('project_id', 'key')]),
        ),
        migrations.AlterUniqueTogether(
            name='scheduleddeletion',
            unique_together=set([('app_label', 'model_name', 'object_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='repository',
            unique_together=set([('organization_id', 'provider', 'external_id'), ('organization_id', 'name')]),
        ),
        migrations.AddField(
            model_name='release',
            name='projects',
            field=models.ManyToManyField(related_name='releases', through='sentry.ReleaseProject', to=b'sentry.Project'),
        ),
        migrations.AddField(
            model_name='projectteam',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Team'),
        ),
        migrations.AlterUniqueTogether(
            name='projectplatform',
            unique_together=set([('project_id', 'platform')]),
        ),
        migrations.AddField(
            model_name='projectcficachefile',
            name='debug_file',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_column=b'dsym_file_id', on_delete=django.db.models.deletion.DO_NOTHING, to='sentry.ProjectDebugFile'),
        ),
        migrations.AddField(
            model_name='projectcficachefile',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='project',
            name='teams',
            field=models.ManyToManyField(related_name='teams', through='sentry.ProjectTeam', to=b'sentry.Team'),
        ),
        migrations.AddField(
            model_name='processingissue',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AlterUniqueTogether(
            name='platformexternalissue',
            unique_together=set([('group_id', 'service_type')]),
        ),
        migrations.AddField(
            model_name='organizationmemberteam',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Team'),
        ),
        migrations.AddField(
            model_name='organizationmember',
            name='teams',
            field=models.ManyToManyField(blank=True, through='sentry.OrganizationMemberTeam', to=b'sentry.Team'),
        ),
        migrations.AddField(
            model_name='organizationmember',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sentry_orgmember_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='organizationaccessrequest',
            name='member',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.OrganizationMember'),
        ),
        migrations.AddField(
            model_name='organizationaccessrequest',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Team'),
        ),
        migrations.AddField(
            model_name='organization',
            name='members',
            field=models.ManyToManyField(related_name='org_memberships', through='sentry.OrganizationMember', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='location',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.MonitorLocation'),
        ),
        migrations.AddField(
            model_name='monitorcheckin',
            name='monitor',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Monitor'),
        ),
        migrations.AlterIndexTogether(
            name='monitor',
            index_together=set([('type', 'next_checkin')]),
        ),
        migrations.AlterUniqueTogether(
            name='latestrelease',
            unique_together=set([('repository_id', 'environment_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='integrationexternalproject',
            unique_together=set([('organization_integration_id', 'external_id')]),
        ),
        migrations.AddField(
            model_name='integration',
            name='organizations',
            field=models.ManyToManyField(related_name='integrations', through='sentry.OrganizationIntegration', to=b'sentry.Organization'),
        ),
        migrations.AddField(
            model_name='integration',
            name='projects',
            field=models.ManyToManyField(related_name='integrations', through='sentry.ProjectIntegration', to=b'sentry.Project'),
        ),
        migrations.AlterUniqueTogether(
            name='identityprovider',
            unique_together=set([('type', 'external_id')]),
        ),
        migrations.AddField(
            model_name='identity',
            name='idp',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.IdentityProvider'),
        ),
        migrations.AddField(
            model_name='identity',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='grouptombstone',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AlterUniqueTogether(
            name='grouptagvalue',
            unique_together=set([('group_id', 'key', 'value')]),
        ),
        migrations.AlterIndexTogether(
            name='grouptagvalue',
            index_together=set([('project_id', 'key', 'value', 'last_seen')]),
        ),
        migrations.AlterUniqueTogether(
            name='grouptagkey',
            unique_together=set([('project_id', 'group_id', 'key')]),
        ),
        migrations.AddField(
            model_name='groupsubscription',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='subscription_set', to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='groupsubscription',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupshare',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='groupshare',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupseen',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='groupseen',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='grouprulestatus',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='grouprulestatus',
            name='rule',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Rule'),
        ),
        migrations.AddField(
            model_name='groupresolution',
            name='release',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Release'),
        ),
        migrations.AlterUniqueTogether(
            name='grouprelease',
            unique_together=set([('group_id', 'release_id', 'environment')]),
        ),
        migrations.AlterUniqueTogether(
            name='grouplink',
            unique_together=set([('group_id', 'linked_type', 'linked_id')]),
        ),
        migrations.AddField(
            model_name='grouphash',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='groupenvironment',
            name='first_release',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='sentry.Release'),
        ),
        migrations.AddField(
            model_name='groupenvironment',
            name='group',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Group'),
        ),
        migrations.AddField(
            model_name='groupemailthread',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groupemail_set', to='sentry.Project'),
        ),
        migrations.AlterUniqueTogether(
            name='groupcommitresolution',
            unique_together=set([('group_id', 'commit_id')]),
        ),
        migrations.AddField(
            model_name='groupbookmark',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='bookmark_set', to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='groupbookmark',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sentry_bookmark_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='groupassignee',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='assignee_set', to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='groupassignee',
            name='team',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sentry_assignee_set', to='sentry.Team'),
        ),
        migrations.AddField(
            model_name='groupassignee',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sentry_assignee_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='group',
            name='first_release',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, to='sentry.Release'),
        ),
        migrations.AddField(
            model_name='group',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='fileblobowner',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization'),
        ),
        migrations.AddField(
            model_name='file',
            name='blob',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='legacy_blob', to='sentry.FileBlob'),
        ),
        migrations.AddField(
            model_name='file',
            name='blobs',
            field=models.ManyToManyField(through='sentry.FileBlobIndex', to=b'sentry.FileBlob'),
        ),
        migrations.AddField(
            model_name='featureadoption',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization'),
        ),
        migrations.AlterUniqueTogether(
            name='externalissue',
            unique_together=set([('organization_id', 'integration_id', 'key')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventuser',
            unique_together=set([('project_id', 'hash'), ('project_id', 'ident')]),
        ),
        migrations.AlterIndexTogether(
            name='eventuser',
            index_together=set([('project_id', 'username'), ('project_id', 'ip_address'), ('project_id', 'email')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventtag',
            unique_together=set([('event_id', 'key_id', 'value_id')]),
        ),
        migrations.AlterIndexTogether(
            name='eventtag',
            index_together=set([('group_id', 'key_id', 'value_id')]),
        ),
        migrations.AddField(
            model_name='eventprocessingissue',
            name='processing_issue',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.ProcessingIssue'),
        ),
        migrations.AddField(
            model_name='eventprocessingissue',
            name='raw_event',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.RawEvent'),
        ),
        migrations.AlterUniqueTogether(
            name='eventmapping',
            unique_together=set([('project_id', 'event_id')]),
        ),
        migrations.AddField(
            model_name='eventattachment',
            name='file',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.File'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together=set([('project_id', 'event_id')]),
        ),
        migrations.AlterIndexTogether(
            name='event',
            index_together=set([('group_id', 'datetime')]),
        ),
        migrations.AddField(
            model_name='environmentproject',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='environment',
            name='projects',
            field=models.ManyToManyField(through='sentry.EnvironmentProject', to=b'sentry.Project'),
        ),
        migrations.AddField(
            model_name='distribution',
            name='release',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Release'),
        ),
        migrations.AddField(
            model_name='discoversavedqueryproject',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='discoversavedquery',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization'),
        ),
        migrations.AddField(
            model_name='discoversavedquery',
            name='projects',
            field=models.ManyToManyField(through='sentry.DiscoverSavedQueryProject', to=b'sentry.Project'),
        ),
        migrations.AddField(
            model_name='deploy',
            name='release',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Release'),
        ),
        migrations.AddField(
            model_name='dashboard',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization'),
        ),
        migrations.AddField(
            model_name='counter',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project', unique=True),
        ),
        migrations.AlterUniqueTogether(
            name='commitauthor',
            unique_together=set([('organization_id', 'email'), ('organization_id', 'external_id')]),
        ),
        migrations.AddField(
            model_name='commit',
            name='author',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.CommitAuthor'),
        ),
        migrations.AddField(
            model_name='authprovider',
            name='default_teams',
            field=models.ManyToManyField(blank=True, to=b'sentry.Team'),
        ),
        migrations.AddField(
            model_name='authprovider',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization', unique=True),
        ),
        migrations.AddField(
            model_name='authidentity',
            name='auth_provider',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.AuthProvider'),
        ),
        migrations.AddField(
            model_name='authidentity',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='auditlogentry',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization'),
        ),
        migrations.AddField(
            model_name='auditlogentry',
            name='target_user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='audit_targets', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='apikey',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='key_set', to='sentry.Organization'),
        ),
        migrations.AddField(
            model_name='activity',
            name='group',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Group'),
        ),
        migrations.AddField(
            model_name='activity',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AddField(
            model_name='activity',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AlterUniqueTogether(
            name='widgetdatasource',
            unique_together=set([('widget', 'name'), ('widget', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='widget',
            unique_together=set([('dashboard', 'title'), ('dashboard', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='userreport',
            unique_together=set([('project', 'event_id')]),
        ),
        migrations.AlterIndexTogether(
            name='userreport',
            index_together=set([('project', 'date_added'), ('project', 'event_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='userpermission',
            unique_together=set([('user', 'permission')]),
        ),
        migrations.AlterUniqueTogether(
            name='useroption',
            unique_together=set([('user', 'project', 'key'), ('user', 'organization', 'key')]),
        ),
        migrations.AlterUniqueTogether(
            name='userip',
            unique_together=set([('user', 'ip_address')]),
        ),
        migrations.AlterUniqueTogether(
            name='useremail',
            unique_together=set([('user', 'email')]),
        ),
        migrations.AlterUniqueTogether(
            name='team',
            unique_together=set([('organization', 'slug')]),
        ),
        migrations.AlterUniqueTogether(
            name='servicehookproject',
            unique_together=set([('service_hook', 'project_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='savedsearchuserdefault',
            unique_together=set([('project', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='savedsearch',
            unique_together=set([('organization', 'owner', 'type'), ('project', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='reprocessingreport',
            unique_together=set([('project', 'event_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='releaseprojectenvironment',
            unique_together=set([('project', 'release', 'environment')]),
        ),
        migrations.AlterUniqueTogether(
            name='releaseproject',
            unique_together=set([('project', 'release')]),
        ),
        migrations.AlterUniqueTogether(
            name='releaseheadcommit',
            unique_together=set([('repository_id', 'release')]),
        ),
        migrations.AlterUniqueTogether(
            name='releasefile',
            unique_together=set([('release', 'ident')]),
        ),
        migrations.AlterIndexTogether(
            name='releasefile',
            index_together=set([('release', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='releaseenvironment',
            unique_together=set([('organization', 'release', 'environment')]),
        ),
        migrations.AlterUniqueTogether(
            name='releasecommit',
            unique_together=set([('release', 'commit'), ('release', 'order')]),
        ),
        migrations.AlterUniqueTogether(
            name='release',
            unique_together=set([('organization', 'version')]),
        ),
        migrations.AlterUniqueTogether(
            name='recentsearch',
            unique_together=set([('user', 'organization', 'type', 'query_hash')]),
        ),
        migrations.AlterUniqueTogether(
            name='rawevent',
            unique_together=set([('project', 'event_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='pullrequestcommit',
            unique_together=set([('pull_request', 'commit')]),
        ),
        migrations.AlterUniqueTogether(
            name='pullrequest',
            unique_together=set([('repository_id', 'key')]),
        ),
        migrations.AlterIndexTogether(
            name='pullrequest',
            index_together=set([('repository_id', 'date_added'), ('organization_id', 'merge_commit_sha')]),
        ),
        migrations.AlterUniqueTogether(
            name='promptsactivity',
            unique_together=set([('user', 'feature', 'organization_id', 'project_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectteam',
            unique_together=set([('project', 'team')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectsymcachefile',
            unique_together=set([('project', 'debug_file')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectredirect',
            unique_together=set([('organization', 'redirect_slug')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectoption',
            unique_together=set([('project', 'key')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectintegration',
            unique_together=set([('project', 'integration')]),
        ),
        migrations.AlterIndexTogether(
            name='projectdebugfile',
            index_together=set([('project', 'code_id'), ('project', 'debug_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectcficachefile',
            unique_together=set([('project', 'debug_file')]),
        ),
        migrations.AlterUniqueTogether(
            name='projectbookmark',
            unique_together=set([('project', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='project',
            unique_together=set([('organization', 'slug')]),
        ),
        migrations.AlterUniqueTogether(
            name='processingissue',
            unique_together=set([('project', 'checksum', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='organizationoption',
            unique_together=set([('organization', 'key')]),
        ),
        migrations.AlterUniqueTogether(
            name='organizationonboardingtask',
            unique_together=set([('organization', 'task')]),
        ),
        migrations.AlterUniqueTogether(
            name='organizationmemberteam',
            unique_together=set([('team', 'organizationmember')]),
        ),
        migrations.AlterUniqueTogether(
            name='organizationmember',
            unique_together=set([('organization', 'user'), ('organization', 'email')]),
        ),
        migrations.AlterUniqueTogether(
            name='organizationintegration',
            unique_together=set([('organization', 'integration')]),
        ),
        migrations.AlterUniqueTogether(
            name='organizationaccessrequest',
            unique_together=set([('team', 'member')]),
        ),
        migrations.AlterUniqueTogether(
            name='integration',
            unique_together=set([('provider', 'external_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='identity',
            unique_together=set([('idp', 'external_id'), ('idp', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='groupsubscription',
            unique_together=set([('group', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='groupseen',
            unique_together=set([('user', 'group')]),
        ),
        migrations.AlterUniqueTogether(
            name='grouprulestatus',
            unique_together=set([('rule', 'group')]),
        ),
        migrations.AlterUniqueTogether(
            name='groupmeta',
            unique_together=set([('group', 'key')]),
        ),
        migrations.AlterUniqueTogether(
            name='grouphash',
            unique_together=set([('project', 'hash')]),
        ),
        migrations.AlterUniqueTogether(
            name='groupenvironment',
            unique_together=set([('group', 'environment')]),
        ),
        migrations.AlterIndexTogether(
            name='groupenvironment',
            index_together=set([('environment', 'first_release')]),
        ),
        migrations.AlterUniqueTogether(
            name='groupemailthread',
            unique_together=set([('email', 'msgid'), ('email', 'group')]),
        ),
        migrations.AlterUniqueTogether(
            name='groupbookmark',
            unique_together=set([('project', 'user', 'group')]),
        ),
        migrations.AlterUniqueTogether(
            name='group',
            unique_together=set([('project', 'short_id')]),
        ),
        migrations.AlterIndexTogether(
            name='group',
            index_together=set([('project', 'first_release')]),
        ),
        migrations.AlterUniqueTogether(
            name='fileblobowner',
            unique_together=set([('blob', 'organization')]),
        ),
        migrations.AlterUniqueTogether(
            name='fileblobindex',
            unique_together=set([('file', 'blob', 'offset')]),
        ),
        migrations.AlterUniqueTogether(
            name='featureadoption',
            unique_together=set([('organization', 'feature_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventprocessingissue',
            unique_together=set([('raw_event', 'processing_issue')]),
        ),
        migrations.AlterUniqueTogether(
            name='eventattachment',
            unique_together=set([('project_id', 'event_id', 'file')]),
        ),
        migrations.AlterIndexTogether(
            name='eventattachment',
            index_together=set([('project_id', 'date_added')]),
        ),
        migrations.AlterUniqueTogether(
            name='environmentproject',
            unique_together=set([('project', 'environment')]),
        ),
        migrations.AlterUniqueTogether(
            name='environment',
            unique_together=set([('organization_id', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='distribution',
            unique_together=set([('release', 'name')]),
        ),
        migrations.AlterUniqueTogether(
            name='discoversavedqueryproject',
            unique_together=set([('project', 'discover_saved_query')]),
        ),
        migrations.AlterUniqueTogether(
            name='dashboard',
            unique_together=set([('organization', 'title')]),
        ),
        migrations.AlterUniqueTogether(
            name='commitfilechange',
            unique_together=set([('commit', 'filename')]),
        ),
        migrations.AlterUniqueTogether(
            name='commit',
            unique_together=set([('repository_id', 'key')]),
        ),
        migrations.AlterIndexTogether(
            name='commit',
            index_together=set([('repository_id', 'date_added')]),
        ),
        migrations.AlterUniqueTogether(
            name='broadcastseen',
            unique_together=set([('broadcast', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='authidentity',
            unique_together=set([('auth_provider', 'ident'), ('auth_provider', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='authenticator',
            unique_together=set([('user', 'type')]),
        ),
        migrations.AlterUniqueTogether(
            name='assistantactivity',
            unique_together=set([('user', 'guide_id')]),
        ),
        migrations.AlterUniqueTogether(
            name='apiauthorization',
            unique_together=set([('user', 'application')]),
        ),
        migrations.RunSQL(
            sql='\n        create or replace function sentry_increment_project_counter(\n                project bigint, delta int) returns int as $$\n            declare\n            new_val int;\n            begin\n            loop\n                update sentry_projectcounter set value = value + delta\n                where project_id = project\n                returning value into new_val;\n                if found then\n                return new_val;\n                end if;\n                begin\n                insert into sentry_projectcounter(project_id, value)\n                    values (project, delta)\n                    returning value into new_val;\n                return new_val;\n                exception when unique_violation then\n                end;\n            end loop;\n            end\n            $$ language plpgsql;\n        ',
        ),
        migrations.RunSQL(
            sql='\n        CREATE UNIQUE INDEX sentry_savedsearch_is_global_6793a2f9e1b59b95\n        ON sentry_savedsearch USING btree (is_global, name)\n        WHERE is_global\n        ',
        ),
        migrations.RunSQL(
            sql='\n        CREATE UNIQUE INDEX sentry_savedsearch_organization_id_313a24e907cdef99\n        ON sentry_savedsearch USING btree (organization_id, name, type)\n        WHERE (owner_id IS NULL);\n        ',
        ),
        migrations.CreateModel(
            name='AlertRule',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('name', models.TextField()),
                ('status', models.SmallIntegerField(default=0)),
                ('dataset', models.TextField()),
                ('query', models.TextField()),
                ('include_all_projects', models.BooleanField(default=False)),
                ('aggregation', models.IntegerField(default=0)),
                ('time_window', models.IntegerField()),
                ('resolution', models.IntegerField()),
                ('threshold_type', models.SmallIntegerField(null=True)),
                ('alert_threshold', models.IntegerField(null=True)),
                ('resolve_threshold', models.IntegerField(null=True)),
                ('threshold_period', models.IntegerField()),
                ('date_modified', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_alertrule',
            },
        ),
        migrations.CreateModel(
            name='AlertRuleExcludedProjects',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRule')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_alertruleexcludedprojects',
            },
        ),
        migrations.CreateModel(
            name='AlertRuleQuerySubscription',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRule')),
            ],
            options={
                'db_table': 'sentry_alertrulequerysubscription',
            },
        ),
        migrations.CreateModel(
            name='AlertRuleTrigger',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('label', models.TextField()),
                ('threshold_type', models.SmallIntegerField()),
                ('alert_threshold', models.IntegerField()),
                ('resolve_threshold', models.IntegerField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRule')),
            ],
            options={
                'db_table': 'sentry_alertruletrigger',
            },
        ),
        migrations.CreateModel(
            name='AlertRuleTriggerExclusion',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule_trigger', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exclusions', to='sentry.AlertRuleTrigger')),
            ],
            options={
                'db_table': 'sentry_alertruletriggerexclusion',
            },
        ),
        migrations.CreateModel(
            name='Incident',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('identifier', models.IntegerField()),
                ('detection_uuid', sentry.db.models.fields.uuid.UUIDField(db_index=True, max_length=32, null=True)),
                ('status', models.PositiveSmallIntegerField(default=1)),
                ('type', models.PositiveSmallIntegerField(default=1)),
                ('title', models.TextField()),
                ('query', models.TextField()),
                ('date_started', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_detected', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_closed', models.DateTimeField(null=True)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.AlertRule')),
            ],
            options={
                'db_table': 'sentry_incident',
            },
        ),
        migrations.CreateModel(
            name='IncidentActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField()),
                ('value', models.TextField(null=True)),
                ('previous_value', models.TextField(null=True)),
                ('comment', models.TextField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_incidentactivity',
            },
        ),
        migrations.CreateModel(
            name='IncidentGroup',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
            ],
            options={
                'db_table': 'sentry_incidentgroup',
            },
        ),
        migrations.CreateModel(
            name='IncidentProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_incidentproject',
            },
        ),
        migrations.CreateModel(
            name='IncidentSeen',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('last_seen', models.DateTimeField(default=django.utils.timezone.now)),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_incidentseen',
            },
        ),
        migrations.CreateModel(
            name='IncidentSnapshot',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('unique_users', models.IntegerField()),
                ('total_events', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_incidentsnapshot',
            },
        ),
        migrations.CreateModel(
            name='IncidentSubscription',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_incidentsubscription',
            },
        ),
        migrations.CreateModel(
            name='IncidentSuspectCommit',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('order', models.SmallIntegerField()),
                ('commit', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Commit')),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident')),
            ],
            options={
                'db_table': 'sentry_incidentsuspectcommit',
            },
        ),
        migrations.CreateModel(
            name='IncidentTrigger',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('status', models.SmallIntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule_trigger', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRuleTrigger')),
                ('incident', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident')),
            ],
            options={
                'db_table': 'sentry_incidenttrigger',
            },
        ),
        migrations.CreateModel(
            name='IntegrationFeature',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('user_description', models.TextField(null=True)),
                ('feature', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'integrations-api'), (1, b'integrations-issue-link'), (2, b'integrations-stacktrace-link'), (3, b'integrations-event-hooks')], default=0)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_integrationfeature',
            },
        ),
        migrations.CreateModel(
            name='PagerDutyService',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('integration_key', models.CharField(max_length=255)),
                ('service_id', models.CharField(max_length=255)),
                ('service_name', models.CharField(max_length=255)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('organization_integration', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.OrganizationIntegration')),
            ],
            options={
                'db_table': 'sentry_pagerdutyservice',
            },
        ),
        migrations.CreateModel(
            name='PagerDutyServiceProject',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('integration_key', models.CharField(max_length=255, null=True)),
                ('service_id', models.CharField(max_length=255, null=True)),
                ('service_name', models.CharField(max_length=255, null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('organization_integration', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.OrganizationIntegration')),
                ('pagerduty_service', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.PagerDutyService')),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_pagerdutyserviceproject',
            },
        ),
        migrations.CreateModel(
            name='QuerySubscription',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.TextField()),
                ('subscription_id', models.TextField(unique=True)),
                ('dataset', models.TextField()),
                ('query', models.TextField()),
                ('aggregation', models.IntegerField(default=0)),
                ('time_window', models.IntegerField()),
                ('resolution', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_querysubscription',
            },
        ),
        migrations.CreateModel(
            name='SentryAppInstallationToken',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('api_token', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.ApiToken')),
            ],
            options={
                'db_table': 'sentry_sentryappinstallationtoken',
            },
        ),
        migrations.CreateModel(
            name='SentryAppWebhookError',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('request_body', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('request_headers', sentry.db.models.fields.encrypted.EncryptedJsonField(default=dict)),
                ('event_type', models.CharField(max_length=64)),
                ('webhook_url', models.URLField()),
                ('response_body', models.TextField()),
                ('response_code', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'sentry_sentryappwebhookerror',
            },
        ),
        migrations.CreateModel(
            name='TimeSeriesSnapshot',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('start', models.DateTimeField()),
                ('end', models.DateTimeField()),
                ('values', sentry.db.models.fields.array.ArrayField(null=True)),
                ('period', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
            ],
            options={
                'db_table': 'sentry_timeseriessnapshot',
            },
        ),
        migrations.DeleteModel(
            name='EventMapping',
        ),
        migrations.DeleteModel(
            name='EventTag',
        ),
        migrations.DeleteModel(
            name='GroupTagKey',
        ),
        migrations.DeleteModel(
            name='GroupTagValue',
        ),
        migrations.RemoveField(
            model_name='projectcficachefile',
            name='cache_file',
        ),
        migrations.RemoveField(
            model_name='projectcficachefile',
            name='debug_file',
        ),
        migrations.RemoveField(
            model_name='projectcficachefile',
            name='project',
        ),
        migrations.AlterUniqueTogether(
            name='projectsymcachefile',
            unique_together=set([]),
        ),
        migrations.RemoveField(
            model_name='projectsymcachefile',
            name='cache_file',
        ),
        migrations.RemoveField(
            model_name='projectsymcachefile',
            name='debug_file',
        ),
        migrations.RemoveField(
            model_name='projectsymcachefile',
            name='project',
        ),
        migrations.DeleteModel(
            name='TagKey',
        ),
        migrations.DeleteModel(
            name='TagValue',
        ),
        migrations.RemoveField(
            model_name='sentryappinstallation',
            name='authorization',
        ),
        migrations.AddField(
            model_name='broadcast',
            name='cta',
            field=models.CharField(blank=True, max_length=256, null=True),
        ),
        migrations.AddField(
            model_name='groupredirect',
            name='organization_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='groupredirect',
            name='previous_project_slug',
            field=models.SlugField(null=True),
        ),
        migrations.AddField(
            model_name='groupredirect',
            name='previous_short_id',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(null=True),
        ),
        migrations.AddField(
            model_name='organizationmember',
            name='invite_status',
            field=models.PositiveSmallIntegerField(choices=[(0, 'Approved'), (1, 'Organization member requested to invite user'), (2, 'User requested to join organization')], default=0, null=True),
        ),
        migrations.AddField(
            model_name='organizationmember',
            name='inviter',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='sentry_inviter_set', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='projectownership',
            name='auto_assignment',
            field=models.BooleanField(default=False),
        ),
        migrations.AddField(
            model_name='sentryapp',
            name='verify_install',
            field=models.BooleanField(default=True),
        ),
        migrations.AddField(
            model_name='sentryappinstallation',
            name='api_token',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='sentry_app_installation', to='sentry.ApiToken'),
        ),
        migrations.AddField(
            model_name='sentryappinstallation',
            name='status',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'pending'), (1, b'installed')], db_index=True, default=0),
        ),
        migrations.AlterField(
            model_name='auditlogentry',
            name='event',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'member.invite'), (2, b'member.add'), (3, b'member.accept-invite'), (5, b'member.remove'), (4, b'member.edit'), (6, b'member.join-team'), (7, b'member.leave-team'), (8, b'member.pending'), (20, b'team.create'), (21, b'team.edit'), (22, b'team.remove'), (30, b'project.create'), (31, b'project.edit'), (32, b'project.remove'), (33, b'project.set-public'), (34, b'project.set-private'), (35, b'project.request-transfer'), (36, b'project.accept-transfer'), (37, b'project.enable'), (38, b'project.disable'), (10, b'org.create'), (11, b'org.edit'), (12, b'org.remove'), (13, b'org.restore'), (40, b'tagkey.remove'), (50, b'projectkey.create'), (51, b'projectkey.edit'), (52, b'projectkey.remove'), (53, b'projectkey.enable'), (53, b'projectkey.disable'), (60, b'sso.enable'), (61, b'sso.disable'), (62, b'sso.edit'), (63, b'sso-identity.link'), (70, b'api-key.create'), (71, b'api-key.edit'), (72, b'api-key.remove'), (80, b'rule.create'), (81, b'rule.edit'), (82, b'rule.remove'), (100, b'servicehook.create'), (101, b'servicehook.edit'), (102, b'servicehook.remove'), (103, b'servicehook.enable'), (104, b'servicehook.disable'), (110, b'integration.add'), (111, b'integration.edit'), (112, b'integration.remove'), (113, b'sentry-app.add'), (115, b'sentry-app.remove'), (116, b'sentry-app.install'), (117, b'sentry-app.uninstall'), (130, b'internal-integration.create'), (135, b'internal-integration.add-token'), (136, b'internal-integration.remove-token'), (90, b'ondemand.edit'), (91, b'trial.started'), (92, b'plan.changed'), (93, b'plan.cancelled')]),
        ),
        migrations.AlterField(
            model_name='commitfilechange',
            name='filename',
            field=models.CharField(max_length=255),
        ),
        migrations.AlterField(
            model_name='discoversavedquery',
            name='query',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='externalissue',
            name='metadata',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name='featureadoption',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='file',
            name='headers',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='group',
            name='project',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
        ),
        migrations.AlterField(
            model_name='grouplink',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='groupsnooze',
            name='state',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name='organization',
            name='default_role',
            field=models.CharField(choices=[(b'member', b'Member'), (b'admin', b'Admin'), (b'manager', b'Manager'), (b'owner', b'Organization Owner')], default=b'member', max_length=32),
        ),
        migrations.AlterField(
            model_name='organizationmember',
            name='role',
            field=models.CharField(choices=[(b'member', b'Member'), (b'admin', b'Admin'), (b'manager', b'Manager'), (b'owner', b'Organization Owner')], default=b'member', max_length=32),
        ),
        migrations.AlterField(
            model_name='organizationonboardingtask',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='projectdebugfile',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name='projectkey',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='projectownership',
            name='schema',
            field=sentry.db.models.fields.jsonfield.JSONField(null=True),
        ),
        migrations.AlterField(
            model_name='promptsactivity',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name='release',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name='release',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='releasefile',
            name='project_id',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='repository',
            name='config',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='scheduleddeletion',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name='scheduledjob',
            name='payload',
            field=sentry.db.models.fields.jsonfield.JSONField(default=dict),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='status',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'unpublished'), (1, b'published'), (2, b'internal')], db_index=True, default=0),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='webhook_url',
            field=models.URLField(null=True),
        ),
        migrations.AlterField(
            model_name='widget',
            name='display_options',
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterField(
            model_name='widgetdatasource',
            name='data',
            field=sentry.db.models.fields.jsonfield.JSONField(default={}),
        ),
        migrations.AlterUniqueTogether(
            name='groupassignee',
            unique_together=set([('project', 'group')]),
        ),
        migrations.AlterUniqueTogether(
            name='groupredirect',
            unique_together=set([('organization_id', 'previous_short_id', 'previous_project_slug')]),
        ),
        migrations.AlterIndexTogether(
            name='group',
            index_together=set([('project', 'first_release'), ('project', 'id')]),
        ),
        migrations.DeleteModel(
            name='ProjectCfiCacheFile',
        ),
        migrations.DeleteModel(
            name='ProjectSymCacheFile',
        ),
        migrations.AddField(
            model_name='sentryappwebhookerror',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sentry_app_webhook_errors', to='sentry.Organization'),
        ),
        migrations.AddField(
            model_name='sentryappwebhookerror',
            name='sentry_app',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='webhook_errors', to='sentry.SentryApp'),
        ),
        migrations.AddField(
            model_name='sentryappinstallationtoken',
            name='sentry_app_installation',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.SentryAppInstallation'),
        ),
        migrations.AddField(
            model_name='integrationfeature',
            name='sentry_app',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.SentryApp'),
        ),
        migrations.AddField(
            model_name='incidentsnapshot',
            name='event_stats_snapshot',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.TimeSeriesSnapshot'),
        ),
        migrations.AddField(
            model_name='incidentsnapshot',
            name='incident',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident'),
        ),
        migrations.AddField(
            model_name='incidentgroup',
            name='group',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, db_index=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Group'),
        ),
        migrations.AddField(
            model_name='incidentgroup',
            name='incident',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident'),
        ),
        migrations.AddField(
            model_name='incidentactivity',
            name='event_stats_snapshot',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.TimeSeriesSnapshot'),
        ),
        migrations.AddField(
            model_name='incidentactivity',
            name='incident',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident'),
        ),
        migrations.AddField(
            model_name='incidentactivity',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='incident',
            name='groups',
            field=models.ManyToManyField(related_name='incidents', through='sentry.IncidentGroup', to=b'sentry.Group'),
        ),
        migrations.AddField(
            model_name='incident',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization'),
        ),
        migrations.AddField(
            model_name='incident',
            name='projects',
            field=models.ManyToManyField(related_name='incidents', through='sentry.IncidentProject', to=b'sentry.Project'),
        ),
        migrations.AddField(
            model_name='alertruletriggerexclusion',
            name='query_subscription',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.QuerySubscription'),
        ),
        migrations.AddField(
            model_name='alertruletrigger',
            name='triggered_incidents',
            field=models.ManyToManyField(related_name='triggers', through='sentry.IncidentTrigger', to=b'sentry.Incident'),
        ),
        migrations.AddField(
            model_name='alertrulequerysubscription',
            name='query_subscription',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.QuerySubscription', unique=True),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='excluded_projects',
            field=models.ManyToManyField(related_name='alert_rule_exclusions', through='sentry.AlertRuleExcludedProjects', to=b'sentry.Project'),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_index=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization'),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='query_subscriptions',
            field=models.ManyToManyField(related_name='alert_rules', through='sentry.AlertRuleQuerySubscription', to=b'sentry.QuerySubscription'),
        ),
        migrations.AlterUniqueTogether(
            name='sentryappinstallationtoken',
            unique_together=set([('sentry_app_installation', 'api_token')]),
        ),
        migrations.AlterUniqueTogether(
            name='pagerdutyserviceproject',
            unique_together=set([('project', 'pagerduty_service')]),
        ),
        migrations.AlterUniqueTogether(
            name='pagerdutyservice',
            unique_together=set([('service_id', 'organization_integration')]),
        ),
        migrations.AlterUniqueTogether(
            name='integrationfeature',
            unique_together=set([('sentry_app', 'feature')]),
        ),
        migrations.AlterUniqueTogether(
            name='incidenttrigger',
            unique_together=set([('incident', 'alert_rule_trigger')]),
        ),
        migrations.AlterUniqueTogether(
            name='incidentsuspectcommit',
            unique_together=set([('incident', 'commit')]),
        ),
        migrations.AlterUniqueTogether(
            name='incidentsubscription',
            unique_together=set([('incident', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='incidentseen',
            unique_together=set([('user', 'incident')]),
        ),
        migrations.AlterUniqueTogether(
            name='incidentproject',
            unique_together=set([('project', 'incident')]),
        ),
        migrations.AlterUniqueTogether(
            name='incidentgroup',
            unique_together=set([('group', 'incident')]),
        ),
        migrations.AlterUniqueTogether(
            name='incident',
            unique_together=set([('organization', 'identifier')]),
        ),
        migrations.AlterIndexTogether(
            name='incident',
            index_together=set([('alert_rule', 'type', 'status')]),
        ),
        migrations.AlterUniqueTogether(
            name='alertruletriggerexclusion',
            unique_together=set([('alert_rule_trigger', 'query_subscription')]),
        ),
        migrations.AlterUniqueTogether(
            name='alertruletrigger',
            unique_together=set([('alert_rule', 'label')]),
        ),
        migrations.AlterUniqueTogether(
            name='alertruleexcludedprojects',
            unique_together=set([('alert_rule', 'project')]),
        ),
        migrations.AlterUniqueTogether(
            name='alertrule',
            unique_together=set([('organization', 'name')]),
        ),
        migrations.CreateModel(
            name='AlertRuleTriggerAction',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.SmallIntegerField()),
                ('target_type', models.SmallIntegerField()),
                ('target_identifier', models.TextField(null=True)),
                ('target_display', models.TextField(null=True)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule_trigger', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRuleTrigger')),
                ('integration', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Integration')),
            ],
            options={
                'db_table': 'sentry_alertruletriggeraction',
            },
        ),
        migrations.AlterField(
            model_name='auditlogentry',
            name='event',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'member.invite'), (2, b'member.add'), (3, b'member.accept-invite'), (5, b'member.remove'), (4, b'member.edit'), (6, b'member.join-team'), (7, b'member.leave-team'), (8, b'member.pending'), (20, b'team.create'), (21, b'team.edit'), (22, b'team.remove'), (30, b'project.create'), (31, b'project.edit'), (32, b'project.remove'), (33, b'project.set-public'), (34, b'project.set-private'), (35, b'project.request-transfer'), (36, b'project.accept-transfer'), (37, b'project.enable'), (38, b'project.disable'), (10, b'org.create'), (11, b'org.edit'), (12, b'org.remove'), (13, b'org.restore'), (40, b'tagkey.remove'), (50, b'projectkey.create'), (51, b'projectkey.edit'), (52, b'projectkey.remove'), (53, b'projectkey.enable'), (53, b'projectkey.disable'), (60, b'sso.enable'), (61, b'sso.disable'), (62, b'sso.edit'), (63, b'sso-identity.link'), (70, b'api-key.create'), (71, b'api-key.edit'), (72, b'api-key.remove'), (80, b'rule.create'), (81, b'rule.edit'), (82, b'rule.remove'), (100, b'servicehook.create'), (101, b'servicehook.edit'), (102, b'servicehook.remove'), (103, b'servicehook.enable'), (104, b'servicehook.disable'), (110, b'integration.add'), (111, b'integration.edit'), (112, b'integration.remove'), (113, b'sentry-app.add'), (115, b'sentry-app.remove'), (116, b'sentry-app.install'), (117, b'sentry-app.uninstall'), (130, b'internal-integration.create'), (135, b'internal-integration.add-token'), (136, b'internal-integration.remove-token'), (90, b'ondemand.edit'), (91, b'trial.started'), (92, b'plan.changed'), (93, b'plan.cancelled'), (140, b'invite-request.create'), (141, b'invite-request.remove')]),
        ),
        migrations.AlterField(
            model_name='sentryappwebhookerror',
            name='response_code',
            field=models.PositiveSmallIntegerField(null=True),
        ),
        migrations.RunPython(
            code=fix_content_types
        ),
        migrations.AddField(
            model_name='sentryapp',
            name='date_published',
            field=models.DateTimeField(blank=True, null=True),
        ),
        migrations.AlterField(
            model_name='organization',
            name='default_role',
            field=models.CharField(default=b'member', max_length=32),
        ),
        migrations.AlterField(
            model_name='organizationmember',
            name='role',
            field=models.CharField(default=b'member', max_length=32),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='alertrule',
                    name='alert_threshold',
                ),
                migrations.RemoveField(
                    model_name='alertrule',
                    name='resolve_threshold',
                ),
                migrations.RemoveField(
                    model_name='alertrule',
                    name='threshold_type',
                ),
            ],
        ),
        migrations.AlterField(
            model_name='pagerdutyservice',
            name='service_id',
            field=models.CharField(max_length=255, null=True),
        ),
        migrations.AlterUniqueTogether(
            name='pagerdutyservice',
            unique_together=set([]),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='pagerdutyservice',
                    name='service_id',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_pagerdutyservice" DROP COLUMN "service_id";\n                    ',
                    reverse_sql='\n                        ALTER TABLE "sentry_pagerdutyservice" ADD COLUMN "service_id" varchar(255) NULL;\n                        ',
                ),
            ],
        ),
        migrations.AlterField(
            model_name='sentryappwebhookerror',
            name='organization',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'organization_id'),
        ),
        migrations.AlterField(
            model_name='sentryappwebhookerror',
            name='sentry_app',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'sentry_app_id'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='SentryAppWebhookError',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    DROP TABLE "sentry_sentryappwebhookerror";\n                    ',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE "sentry_alertrule" DROP COLUMN "alert_threshold";\n                    ALTER TABLE "sentry_alertrule" DROP COLUMN "resolve_threshold";\n                    ALTER TABLE "sentry_alertrule" DROP COLUMN "threshold_type";\n                    ',
                    reverse_sql='\n                    ALTER TABLE "sentry_alertrule" ADD COLUMN "alert_threshold" smallint NULL;\n                    ALTER TABLE "sentry_alertrule" ADD COLUMN "resolve_threshold" int NULL;\n                    ALTER TABLE "sentry_alertrule" ADD COLUMN "threshold_type" int NULL;\n\n                    ',
                ),
            ],
        ),
        migrations.AddField(
            model_name='incident',
            name='aggregation',
            field=models.PositiveSmallIntegerField(default=0),
        ),
        migrations.AddField(
            model_name='discoversavedquery',
            name='version',
            field=models.IntegerField(null=True),
        ),
        migrations.RunPython(
            code=forwards_0019,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.RunPython(
            code=forwards_0020,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='incidentsnapshot',
                    name='incident',
                    field=sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident'),
                ),
            ],
        ),
        migrations.RenameModel(
            old_name='LatestRelease',
            new_name='LatestRepoReleaseEnvironment',
        ),
        migrations.RunPython(
            code=hide_environment_none,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.RunPython(
            code=backfill_eventstream,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.AddField(
            model_name='organizationaccessrequest',
            name='requester',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.DeleteModel(
            name='Event',
        ),
        migrations.CreateModel(
            name='ExportedData',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_finished', models.DateTimeField(null=True)),
                ('date_expired', models.DateTimeField(null=True)),
                ('storage_url', models.URLField(null=True)),
                ('query_type', sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'DISCOVER_V1'), (1, b'BILLING_REPORT'), (2, b'ISSUE_BY_TAG')])),
                ('query_info', sentry.db.models.fields.jsonfield.JSONField(default=dict)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_exporteddata',
            },
        ),
        migrations.RunPython(
            code=backfill_user_reports,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.RunPython(
            code=migrate_v1_queries,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.AlterField(
            model_name='incidentsuspectcommit',
            name='commit',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'commit_id', db_index=True),
        ),
        migrations.AlterField(
            model_name='incidentsuspectcommit',
            name='incident',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'incident_id'),
        ),
        migrations.RunPython(
            code=delete_alert_rules_incidents,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.RunPython(
            code=delete_alert_email_user_options,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.RemoveField(
            model_name='exporteddata',
            name='storage_url',
        ),
        migrations.AddField(
            model_name='exporteddata',
            name='file',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.File'),
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(((b'has_releases', b'This Project has sent release data'), (b'has_sourcemaps', b'This Project has processed source maps')), default=0, null=True),
        ),
        migrations.CreateModel(
            name='AlertRuleEnvironment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRule')),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment')),
            ],
            options={
                'db_table': 'sentry_alertruleenvironment',
            },
        ),
        migrations.AddField(
            model_name='alertrule',
            name='environment',
            field=models.ManyToManyField(related_name='alert_rule_environment', through='sentry.AlertRuleEnvironment', to=b'sentry.Environment'),
        ),
        migrations.AlterUniqueTogether(
            name='alertruleenvironment',
            unique_together=set([('alert_rule', 'environment')]),
        ),
        migrations.AlterField(
            model_name='pagerdutyserviceproject',
            name='organization_integration',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'organization_integration_id', db_index=True, null=True),
        ),
        migrations.AlterField(
            model_name='pagerdutyserviceproject',
            name='pagerduty_service',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'pagerduty_service_id', db_index=True),
        ),
        migrations.AlterField(
            model_name='pagerdutyserviceproject',
            name='project',
            field=sentry.db.models.fields.bounded.BoundedBigIntegerField(db_column=b'project_id'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='PagerDutyServiceProject',
                ),
            ],
        ),
        migrations.AlterField(
            model_name='exporteddata',
            name='query_type',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'DISCOVER_V2'), (1, b'BILLING_REPORT'), (2, b'ISSUE_BY_TAG')]),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                            DROP TABLE "sentry_pagerdutyserviceproject";\n                            ',
                    reverse_sql='',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.DeleteModel(
                    name='IncidentSuspectCommit',
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    DROP TABLE "sentry_incidentsuspectcommit";\n                    ',
                    reverse_sql='',
                ),
            ],
        ),
        migrations.AddField(
            model_name='incidenttrigger',
            name='date_modified',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AlterField(
            model_name='incident',
            name='type',
            field=models.PositiveSmallIntegerField(),
        ),
        migrations.AlterField(
            model_name='exporteddata',
            name='date_expired',
            field=models.DateTimeField(db_index=True, null=True),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='incidentactivity',
                    name='event_stats_snapshot',
                ),
            ],
        ),
        migrations.AlterField(
            model_name='exporteddata',
            name='file',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.SET_NULL, to='sentry.File'),
        ),
        migrations.AlterField(
            model_name='exporteddata',
            name='user',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.RunSQL(
            sql='\n            ALTER TABLE "sentry_incidentactivity" DROP COLUMN "event_stats_snapshot_id";\n            ',
            reverse_sql='\n                ALTER TABLE "sentry_incidentactivity" ADD COLUMN "event_stats_snapshot_id" bigint NULL;\n                ',
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.RemoveField(
                    model_name='organizationonboardingtask',
                    name='project_id',
                ),
                migrations.AddField(
                    model_name='organizationonboardingtask',
                    name='project',
                    field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project'),
                ),
                migrations.AlterField(
                    model_name='organizationonboardingtask',
                    name='status',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'complete'), (2, b'pending'), (3, b'skipped')]),
                ),
                migrations.AlterField(
                    model_name='organizationonboardingtask',
                    name='task',
                    field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'create_project'), (2, b'send_first_event'), (3, b'invite_member'), (4, b'setup_second_platform'), (5, b'setup_user_context'), (6, b'setup_release_tracking'), (7, b'setup_sourcemaps'), (8, b'setup_user_reports'), (9, b'setup_issue_tracker'), (10, b'setup_alert_rules')]),
                ),
            ],
        ),
        migrations.CreateModel(
            name='QuerySubscriptionEnvironment',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment')),
                ('query_subscription', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.QuerySubscription')),
            ],
            options={
                'db_table': 'sentry_querysubscriptionenvironment',
            },
        ),
        migrations.AddField(
            model_name='querysubscription',
            name='environments',
            field=models.ManyToManyField(through='sentry.QuerySubscriptionEnvironment', to=b'sentry.Environment'),
        ),
        migrations.AlterUniqueTogether(
            name='querysubscriptionenvironment',
            unique_together=set([('query_subscription', 'environment')]),
        ),
        migrations.AlterField(
            model_name='exporteddata',
            name='query_type',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'Issues-by-Tag'), (1, b'Discover')]),
        ),
        migrations.RunPython(
            code=cleanup_audit_log_data,
        ),
        migrations.AddField(
            model_name='organizationonboardingtask',
            name='completion_seen',
            field=models.DateTimeField(null=True),
        ),
        migrations.CreateModel(
            name='KeyTransaction',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('transaction', models.CharField(max_length=200)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('owner', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('project', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Project')),
            ],
            options={
                'db_table': 'sentry_discoverkeytransaction',
            },
        ),
        migrations.AlterUniqueTogether(
            name='keytransaction',
            unique_together=set([('project', 'transaction')]),
        ),
        migrations.AddField(
            model_name='querysubscription',
            name='status',
            field=models.SmallIntegerField(default=0),
        ),
        migrations.AlterField(
            model_name='querysubscription',
            name='subscription_id',
            field=models.TextField(null=True, unique=True),
        ),
        migrations.RunPython(
            code=migrate_functions_in_queries,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(((b'has_releases', b'This Project has sent release data'),), default=0, null=True),
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(((b'has_releases', b'This Project has sent release data'), (b'has_issue_alerts_targeting', b'This Project has issue alerts targeting')), default=0, null=True),
        ),
        migrations.AlterField(
            model_name='integrationfeature',
            name='feature',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(0, b'integrations-api'), (1, b'integrations-issue-link'), (2, b'integrations-stacktrace-link'), (3, b'integrations-event-hooks'), (4, b'integrations-project-management'), (5, b'integrations-incident-management'), (6, b'integrations-feature-flag')], default=0),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    CREATE INDEX CONCURRENTLY "sentry_eventattachment_project_id_date_added_fi_f3b0597f_idx" ON "sentry_eventattachment" ("project_id", "date_added", "file_id");\n                    ',
                    reverse_sql='\n                        DROP INDEX CONCURRENTLY "sentry_eventattachment_project_id_date_added_fi_f3b0597f_idx";\n                        ',
                ),
            ],
            state_operations=[
                migrations.AlterIndexTogether(
                    name='eventattachment',
                    index_together=set([('project_id', 'date_added', 'file'), ('project_id', 'date_added')]),
                ),
            ],
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE sentry_alertrule DROP CONSTRAINT IF EXISTS sentry_alertrule_organization_id_name_12c48b37_uniq;\n                    ',
                    reverse_sql='DO $$\n                    BEGIN\n                        BEGIN\n                            ALTER TABLE sentry_alertrule ADD CONSTRAINT sentry_alertrule_organization_id_name_12c48b37_uniq UNIQUE (organization_id, name);\n                        EXCEPTION\n                            WHEN duplicate_table THEN\n                        END;\n                    END $$;\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    DROP INDEX CONCURRENTLY IF EXISTS sentry_alertrule_organization_id_name_12c48b37_uniq;\n                    ',
                    reverse_sql='\n                    CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS sentry_alertrule_organization_id_name_12c48b37_uniq\n                    ON sentry_alertrule USING btree (organization_id, name);\n                    ',
                ),
                migrations.RunSQL(
                    sql='\n                    CREATE UNIQUE INDEX CONCURRENTLY IF NOT EXISTS sentry_alertrule_status_active\n                    ON sentry_alertrule USING btree (organization_id, name, status)\n                    WHERE status = 0;\n                    ',
                    reverse_sql='\n                    DROP INDEX CONCURRENTLY IF EXISTS sentry_alertrule_status_active;\n                    ',
                ),
            ],
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='alertrule',
                    unique_together=set([('organization', 'name', 'status')]),
                ),
            ],
        ),
        migrations.AlterField(
            model_name='alertrule',
            name='organization',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization'),
        ),
        migrations.AlterUniqueTogether(
            name='keytransaction',
            unique_together=set([('project', 'owner', 'transaction')]),
        ),
        migrations.SeparateDatabaseAndState(
            database_operations=[
                migrations.RunSQL(
                    sql='\n                    ALTER TABLE sentry_alertrule DROP CONSTRAINT IF EXISTS sentry_alertrule_organization_id_382634eccd5f9371_uniq;\n                    ',
                    reverse_sql='DO $$\n                    BEGIN\n                        BEGIN\n                            ALTER TABLE sentry_alertrule ADD CONSTRAINT sentry_alertrule_organization_id_382634eccd5f9371_uniq UNIQUE (organization_id, name);\n                        EXCEPTION\n                            WHEN duplicate_table THEN\n                        END;\n                    END $$;\n                    ',
                ),
            ],
        ),
        migrations.AlterField(
            model_name='project',
            name='flags',
            field=bitfield.models.BitField(((b'has_releases', b'This Project has sent release data'), (b'has_issue_alerts_targeting', b'This Project has issue alerts targeting'), (b'has_transactions', b'This Project has sent transactions')), default=0, null=True),
        ),
        migrations.AddField(
            model_name='incident',
            name='status_method',
            field=models.PositiveSmallIntegerField(default=3),
        ),
        migrations.AlterModelOptions(
            name='alertrule',
            options={'base_manager_name': 'objects_with_snapshots', 'default_manager_name': 'objects_with_snapshots'},
        ),
        migrations.AlterModelManagers(
            name='alertrule',
            managers=[
                ('objects_with_snapshots', django.db.models.manager.Manager()),
            ],
        ),
        migrations.RunPython(
            code=migrate_to_issue_alert_targeting,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterField(
                    model_name='project',
                    name='flags',
                    field=bitfield.models.BitField(((b'has_releases', b'This Project has sent release data'), (b'has_issue_alerts_targeting', b'This Project has issue alerts targeting'), (b'has_transactions', b'This Project has sent transactions')), default=2, null=True),
                ),
            ],
        ),
        migrations.RunPython(
            code=remove_tracked_superuser_views,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.CreateModel(
            name='PendingIncidentSnapshot',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('target_run_date', models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('incident', sentry.db.models.fields.onetoone.OneToOneCascadeDeletes(on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident')),
            ],
            options={
                'db_table': 'sentry_pendingincidentsnapshot',
            },
        ),
        migrations.AddField(
            model_name='integration',
            name='date_updated',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='integrationexternalproject',
            name='date_updated',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='organizationintegration',
            name='date_updated',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.AddField(
            model_name='pagerdutyservice',
            name='date_updated',
            field=models.DateTimeField(default=django.utils.timezone.now),
        ),
        migrations.CreateModel(
            name='SnubaQuery',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('dataset', models.TextField()),
                ('query', models.TextField()),
                ('aggregate', models.TextField()),
                ('time_window', models.IntegerField()),
                ('resolution', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('environment', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment')),
            ],
            options={
                'db_table': 'sentry_snubaquery',
            },
        ),
        migrations.AlterField(
            model_name='alertrule',
            name='aggregation',
            field=models.IntegerField(default=0, null=True),
        ),
        migrations.AlterField(
            model_name='alertrule',
            name='dataset',
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name='alertrule',
            name='query',
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name='alertrule',
            name='resolution',
            field=models.IntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='alertrule',
            name='time_window',
            field=models.IntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='querysubscription',
            name='aggregation',
            field=models.IntegerField(default=0, null=True),
        ),
        migrations.AlterField(
            model_name='querysubscription',
            name='dataset',
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name='querysubscription',
            name='query',
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name='querysubscription',
            name='resolution',
            field=models.IntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='querysubscription',
            name='time_window',
            field=models.IntegerField(null=True),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='snuba_query',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.SnubaQuery', unique=True),
        ),
        migrations.AddField(
            model_name='querysubscription',
            name='snuba_query',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='sentry.SnubaQuery'),
        ),
        migrations.RunPython(
            code=migrate_alert_query_model_0073,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.AlterField(
            model_name='featureadoption',
            name='feature_id',
            field=models.PositiveIntegerField(choices=[(0, b'Python'), (1, b'JavaScript'), (2, b'Node.js'), (3, b'Ruby'), (4, b'Java'), (5, b'Cocoa'), (6, b'Objective-C'), (7, b'PHP'), (8, b'Go'), (9, b'C#'), (10, b'Perl'), (11, b'Elixir'), (12, b'CFML'), (13, b'Groovy'), (14, b'CSP Reports'), (20, b'Flask'), (21, b'Django'), (22, b'Celery'), (23, b'Bottle'), (24, b'Pylons'), (25, b'Tornado'), (26, b'web.py'), (27, b'Zope'), (40, b'First Event'), (41, b'Release Tracking'), (42, b'Environment Tracking'), (43, b'User Tracking'), (44, b'Custom Tags'), (45, b'Source Maps'), (46, b'User Feedback'), (48, b'Breadcrumbs'), (49, b'Resolve with Commit'), (60, b'First Project'), (61, b'Invite Team'), (62, b'Assign Issue'), (63, b'Resolve in Next Release'), (64, b'Advanced Search'), (65, b'Saved Search'), (66, b'Inbound Filters'), (67, b'Alert Rules'), (68, b'Issue Tracker Integration'), (69, b'Notification Integration'), (70, b'Delete and Discard Future Events'), (71, b'Link a Repository'), (72, b'Ownership Rules'), (73, b'Ignore Issue'), (80, b'SSO'), (81, b'Data Scrubbers'), (90, b'Create Release Using API'), (91, b'Create Deploy Using API'), (92, b'Metric Alert Rules')]),
        ),
        migrations.RunPython(
            code=migrate_alert_query_model_0075,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.AlterField(
            model_name='alertruleenvironment',
            name='alert_rule',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRule'),
        ),
        migrations.AlterField(
            model_name='alertruleenvironment',
            name='environment',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment'),
        ),
        migrations.AlterField(
            model_name='alertrulequerysubscription',
            name='alert_rule',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRule'),
        ),
        migrations.AlterField(
            model_name='alertrulequerysubscription',
            name='query_subscription',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.QuerySubscription', unique=True),
        ),
        migrations.AlterField(
            model_name='querysubscriptionenvironment',
            name='environment',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Environment'),
        ),
        migrations.AlterField(
            model_name='querysubscriptionenvironment',
            name='query_subscription',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.QuerySubscription'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='alertruleenvironment',
                    unique_together=set([]),
                ),
                migrations.RemoveField(
                    model_name='alertruleenvironment',
                    name='alert_rule',
                ),
                migrations.RemoveField(
                    model_name='alertruleenvironment',
                    name='environment',
                ),
                migrations.RemoveField(
                    model_name='alertrulequerysubscription',
                    name='alert_rule',
                ),
                migrations.RemoveField(
                    model_name='alertrulequerysubscription',
                    name='query_subscription',
                ),
                migrations.AlterUniqueTogether(
                    name='querysubscriptionenvironment',
                    unique_together=set([]),
                ),
                migrations.RemoveField(
                    model_name='querysubscriptionenvironment',
                    name='environment',
                ),
                migrations.RemoveField(
                    model_name='querysubscriptionenvironment',
                    name='query_subscription',
                ),
                migrations.RemoveField(
                    model_name='alertrule',
                    name='aggregation',
                ),
                migrations.RemoveField(
                    model_name='alertrule',
                    name='dataset',
                ),
                migrations.RemoveField(
                    model_name='alertrule',
                    name='environment',
                ),
                migrations.RemoveField(
                    model_name='alertrule',
                    name='query',
                ),
                migrations.RemoveField(
                    model_name='alertrule',
                    name='query_subscriptions',
                ),
                migrations.RemoveField(
                    model_name='alertrule',
                    name='resolution',
                ),
                migrations.RemoveField(
                    model_name='alertrule',
                    name='time_window',
                ),
                migrations.RemoveField(
                    model_name='querysubscription',
                    name='aggregation',
                ),
                migrations.RemoveField(
                    model_name='querysubscription',
                    name='dataset',
                ),
                migrations.RemoveField(
                    model_name='querysubscription',
                    name='environments',
                ),
                migrations.RemoveField(
                    model_name='querysubscription',
                    name='query',
                ),
                migrations.RemoveField(
                    model_name='querysubscription',
                    name='resolution',
                ),
                migrations.RemoveField(
                    model_name='querysubscription',
                    name='time_window',
                ),
                migrations.DeleteModel(
                    name='AlertRuleEnvironment',
                ),
                migrations.DeleteModel(
                    name='AlertRuleQuerySubscription',
                ),
                migrations.DeleteModel(
                    name='QuerySubscriptionEnvironment',
                ),
            ],
        ),
        migrations.RunPython(
            code=delete_incidents_with_no_alert_rule,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.RemoveField(
            model_name='incident',
            name='groups',
        ),
        migrations.AlterField(
            model_name='incident',
            name='aggregation',
            field=models.PositiveSmallIntegerField(default=0, null=True),
        ),
        migrations.AlterField(
            model_name='incident',
            name='alert_rule',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.PROTECT, to='sentry.AlertRule'),
        ),
        migrations.AlterField(
            model_name='incident',
            name='query',
            field=models.TextField(null=True),
        ),
        migrations.AlterField(
            model_name='incidentgroup',
            name='incident',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.Incident'),
        ),
        migrations.SeparateDatabaseAndState(
            state_operations=[
                migrations.AlterUniqueTogether(
                    name='incidentgroup',
                    unique_together=set([]),
                ),
                migrations.RemoveField(
                    model_name='incidentgroup',
                    name='group',
                ),
                migrations.RemoveField(
                    model_name='incidentgroup',
                    name='incident',
                ),
                migrations.RemoveField(
                    model_name='incident',
                    name='aggregation',
                ),
                migrations.RemoveField(
                    model_name='incident',
                    name='query',
                ),
                migrations.DeleteModel(
                    name='IncidentGroup',
                ),
            ],
        ),
        migrations.RunSQL(
            sql='\n            DROP TABLE "sentry_alertruleenvironment";\n            DROP TABLE "sentry_alertrulequerysubscription";\n            DROP TABLE "sentry_querysubscriptionenvironment";\n            DROP TABLE "sentry_incidentgroup";\n\n            ALTER TABLE "sentry_alertrule"\n            DROP COLUMN "aggregation",\n            DROP COLUMN "dataset",\n            DROP COLUMN "query",\n            DROP COLUMN "resolution",\n            DROP COLUMN "time_window";\n\n            ALTER TABLE "sentry_querysubscription"\n            DROP COLUMN "aggregation",\n            DROP COLUMN "dataset",\n            DROP COLUMN "query",\n            DROP COLUMN "resolution";\n\n            ALTER TABLE "sentry_incident"\n            DROP COLUMN "aggregation",\n            DROP COLUMN "query";\n        ',
            reverse_sql='\n            CREATE TABLE "sentry_alertruleenvironment" (id bigint);\n            CREATE TABLE "sentry_alertrulequerysubscription" (id bigint);\n            CREATE TABLE "sentry_querysubscriptionenvironment" (id bigint);\n            CREATE TABLE "sentry_incidentgroup" (id bigint);\n\n            ALTER TABLE "sentry_alertrule"\n                ADD COLUMN "aggregation" int,\n                ADD COLUMN "dataset" int,\n                ADD COLUMN "query" text,\n                ADD COLUMN "resolution" text,\n                ADD COLUMN "time_window" int;\n\n            ALTER TABLE "sentry_querysubscription"\n                ADD COLUMN "aggregation" int,\n                ADD COLUMN "dataset" int,\n                ADD COLUMN "query" text,\n                ADD COLUMN "resolution" text;\n\n            ALTER TABLE "sentry_incident"\n                ADD COLUMN "aggregation" int,\n                ADD COLUMN "query" text;\n\n        ',
        ),
        migrations.AlterField(
            model_name='auditlogentry',
            name='event',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'member.invite'), (2, b'member.add'), (3, b'member.accept-invite'), (5, b'member.remove'), (4, b'member.edit'), (6, b'member.join-team'), (7, b'member.leave-team'), (8, b'member.pending'), (20, b'team.create'), (21, b'team.edit'), (22, b'team.remove'), (30, b'project.create'), (31, b'project.edit'), (32, b'project.remove'), (33, b'project.set-public'), (34, b'project.set-private'), (35, b'project.request-transfer'), (36, b'project.accept-transfer'), (37, b'project.enable'), (38, b'project.disable'), (10, b'org.create'), (11, b'org.edit'), (12, b'org.remove'), (13, b'org.restore'), (40, b'tagkey.remove'), (50, b'projectkey.create'), (51, b'projectkey.edit'), (52, b'projectkey.remove'), (53, b'projectkey.enable'), (53, b'projectkey.disable'), (60, b'sso.enable'), (61, b'sso.disable'), (62, b'sso.edit'), (63, b'sso-identity.link'), (70, b'api-key.create'), (71, b'api-key.edit'), (72, b'api-key.remove'), (80, b'rule.create'), (81, b'rule.edit'), (82, b'rule.remove'), (100, b'servicehook.create'), (101, b'servicehook.edit'), (102, b'servicehook.remove'), (103, b'servicehook.enable'), (104, b'servicehook.disable'), (109, b'integration.upgrade'), (110, b'integration.add'), (111, b'integration.edit'), (112, b'integration.remove'), (113, b'sentry-app.add'), (115, b'sentry-app.remove'), (116, b'sentry-app.install'), (117, b'sentry-app.uninstall'), (130, b'internal-integration.create'), (135, b'internal-integration.add-token'), (136, b'internal-integration.remove-token'), (90, b'ondemand.edit'), (91, b'trial.started'), (92, b'plan.changed'), (93, b'plan.cancelled'), (140, b'invite-request.create'), (141, b'invite-request.remove')]),
        ),
        migrations.AlterField(
            model_name='alertruletrigger',
            name='alert_threshold',
            field=models.FloatField(),
        ),
        migrations.AlterField(
            model_name='alertruletrigger',
            name='resolve_threshold',
            field=models.FloatField(null=True),
        ),
        migrations.AlterField(
            model_name='sentryapp',
            name='webhook_url',
            field=models.URLField(max_length=512, null=True),
        ),
        migrations.CreateModel(
            name='ExportedDataBlob',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('offset', sentry.db.models.fields.bounded.BoundedBigIntegerField()),
                ('blob', sentry.db.models.fields.foreignkey.FlexibleForeignKey(db_constraint=False, on_delete=django.db.models.deletion.CASCADE, to='sentry.FileBlob')),
                ('data_export', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.ExportedData')),
            ],
            options={
                'db_table': 'sentry_exporteddatablob',
            },
        ),
        migrations.AlterUniqueTogether(
            name='exporteddatablob',
            unique_together=set([('data_export', 'blob', 'offset')]),
        ),
        migrations.RunPython(
            code=fix_error_rate_snuba_queries,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.CreateModel(
            name='SentryAppInstallationForProvider',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('date_updated', models.DateTimeField(default=django.utils.timezone.now)),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now, null=True)),
                ('provider', models.CharField(max_length=64)),
                ('organization', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Organization')),
                ('sentry_app_installation', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.SentryAppInstallation')),
            ],
            options={
                'db_table': 'sentry_sentryappinstallationforprovider',
            },
        ),
        migrations.AlterUniqueTogether(
            name='sentryappinstallationforprovider',
            unique_together=set([('provider', 'organization')]),
        ),
        migrations.RunSQL(
            sql='ALTER TABLE sentry_timeseriessnapshot ALTER COLUMN values SET DATA TYPE float[] USING values::float[]',
        ),
        migrations.AddField(
            model_name='alertrule',
            name='resolve_threshold',
            field=models.FloatField(null=True),
        ),
        migrations.AddField(
            model_name='alertrule',
            name='threshold_type',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.RunPython(
            code=backfill_rule_level_fields,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.RunPython(
            code=cleanup_audit_log_data,
        ),
        migrations.CreateModel(
            name='AlertRuleActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.AlertRule')),
                ('previous_alert_rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='previous_alert_rule', to='sentry.AlertRule')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_alertruleactivity',
            },
        ),
        migrations.AlterField(
            model_name='alertruletrigger',
            name='threshold_type',
            field=models.SmallIntegerField(null=True),
        ),
        migrations.AlterField(
            model_name='identity',
            name='external_id',
            field=models.TextField(),
        ),
        migrations.RunPython(
            code=cleanup_event_attachment_files,
        ),
        migrations.CreateModel(
            name='RuleActivity',
            fields=[
                ('id', sentry.db.models.fields.bounded.BoundedBigAutoField(primary_key=True, serialize=False)),
                ('type', models.IntegerField()),
                ('date_added', models.DateTimeField(default=django.utils.timezone.now)),
                ('rule', sentry.db.models.fields.foreignkey.FlexibleForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sentry.Rule')),
                ('user', sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sentry_ruleactivity',
            },
        ),
        migrations.RunPython(
            code=update_ui_components,
            reverse_code=django.db.migrations.operations.special.noop,
        ),
        migrations.AddField(
            model_name='alertruletriggeraction',
            name='sentry_app',
            field=sentry.db.models.fields.foreignkey.FlexibleForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='sentry.SentryApp'),
        ),
        migrations.AlterField(
            model_name='organizationonboardingtask',
            name='task',
            field=sentry.db.models.fields.bounded.BoundedPositiveIntegerField(choices=[(1, b'create_project'), (2, b'send_first_event'), (3, b'invite_member'), (4, b'setup_second_platform'), (5, b'setup_user_context'), (6, b'setup_release_tracking'), (7, b'setup_sourcemaps'), (8, b'setup_user_reports'), (9, b'setup_issue_tracker'), (10, b'setup_alert_rules'), (11, b'setup_transactions')]),
        ),
    ]
